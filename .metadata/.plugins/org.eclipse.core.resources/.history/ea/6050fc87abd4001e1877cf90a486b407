package rispl.dkart.services.ejb.transaction;

import com.retailsols.sds.transaction.ejb.SDSEntityBuilder;
import com.retailsols.sds.transaction.ejb.TransactionService;
import com.rispl.sds.parameter.service.ParameterConfigurationServiceIfc;
import com.test.entities.OrderDetail;
import com.test.entities.OrderDetailsWithInvoice;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.Vector;
import java.util.Map.Entry;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import org.apache.commons.lang3.SerializationUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import rispl.db.model.claim.ClaimTranDscItm;
import rispl.db.model.claim.ClaimTranHeader;
import rispl.db.model.claim.ClaimTranLineItem;
import rispl.db.model.claim.ClaimTranSum;
import rispl.db.model.employee.RisplDkEmpMstr;
import rispl.dk.Employee.EmpMerchAssociationIfc;
import rispl.dk.Employee.EmployeeIfc;
import rispl.dk.customer.Customer;
import rispl.dk.customer.CustomerIfc;
import rispl.dkart.order.shipped.OrderShipmentDetail;
import rispl.dkart.services.PromotionsService;
import rispl.dkart.services.DkartServices.SdsEntityManagerFactory;
import rispl.dkart.services.detail.claim.ClaimDetailTable;
import rispl.dkart.services.ejb.LookUpCustomer;
import rispl.dkart.services.ejb.LookUpEmployee;
import rispl.dkart.services.ejb.LookUpItem;
import rispl.dkart.services.entities.customer.CustomerHeader;
import rispl.dkart.services.entities.customer.CustomerLimit;
import rispl.dkart.services.entities.customer.CustomerSiteAddress;
import rispl.dkart.services.entities.tenders.TranLineItemTender;
import rispl.dkart.services.entities.tenders.TranLineItemTenderPK;
import rispl.dkart.services.entities.transaction.DkartReasonCodes;
import rispl.dkart.services.entities.transaction.ExciseTaxItem;
import rispl.dkart.services.entities.transaction.OrdInvShpQtySrlno;
import rispl.dkart.services.entities.transaction.OrderTranDiscountItem;
import rispl.dkart.services.entities.transaction.OrderTranDiscountItemPK;
import rispl.dkart.services.entities.transaction.OrderTranHeader;
import rispl.dkart.services.entities.transaction.OrderTranHeaderPK;
import rispl.dkart.services.entities.transaction.OrderTranLineItem;
import rispl.dkart.services.entities.transaction.OrderTranLineItemPK;
import rispl.dkart.services.entities.transaction.OrderTranSum;
import rispl.dkart.services.entities.transaction.OrderTranSumPK;
import rispl.dkart.services.entities.transaction.lpo.OrderTransactionLpo;
import rispl.dkart.services.entities.transaction.lpo.OrderTransactionLpoPK;
import rispl.dkart.services.payment.PaymentDetails;
import rispl.dkart.services.transaction.save.SavePostPaymentTransaction;
import rispl.dkservices.common.CustomerSearchCriteria;
import rispl.dkservices.common.EmployeeSearchCriteria;
import rispl.dkservices.common.EmployeeSearchCriteriaIfc;
import rispl.dkservices.common.OrderTransactionSearchCriteria;
import rispl.dkservices.common.OrderTransactionSearchCriteriaIfc;
import rispl.dkservices.common.SearchCriteria;
import rispl.rms.inventory.lookup.RMSInventoryDetailService;
import rispl.services.transaction.find.AbstractOrderTransactionSerivce;
import rispl.services.transaction.find.OrderTransactionException;
import utility.ConfigUtils;

@Stateless(
   mappedName = "lookUpTransactions"
)
@LocalBean
public class OrderTransactions extends AbstractOrderTransactionSerivce implements OrderTransactionsIfc {
   private static final Logger LOGGER = LogManager.getLogger(OrderTransactions.class);
   @Inject
   @SdsEntityManagerFactory
   EntityManagerFactory emf;
   @Inject
   protected LookUpCustomer lookupCustomer;
   @Inject
   protected TransactionService transactionService;
   @Inject
   protected LookUpEmployee lookUpEmployee;
   @Inject
   PromotionsService promoService;
   ParameterConfigurationServiceIfc parameterService;
   @EJB
   LookUpItem lookupItem;

   public ParameterConfigurationServiceIfc getParameterService() {
      return this.parameterService;
   }

   @EJB(
      mappedName = "sdsparameterService"
   )
   public void setParameterService(ParameterConfigurationServiceIfc parameterService) {
      this.parameterService = parameterService;
   }

   @PostConstruct
   void init() {
      super.emf = this.emf;
      super.lookupCustomer = this.lookupCustomer;
   }

   public OrderTranHeader[] getTransactionsInvoices(OrderTransactionSearchCriteriaIfc criteria) {
      OrderTranHeader[] transactionHeaders = null;

      try {
         LOGGER.info("lookup for order transactions using the criteria: \n\t" + criteria);
         transactionHeaders = this.lookUpOrdersOrInvoices(criteria);
      } catch (Exception var4) {
         var4.printStackTrace();
         LOGGER.error("Exception while looking up for the order" + var4.getMessage());
      }

      return transactionHeaders;
   }

   public List<OrderDetailsWithInvoice> getOrderDateForOrderId(String orderNum) {
      Object OrderDetailsWithInvoice = new ArrayList();

      try {
         LOGGER.info("lookup for order Information using the criteria......");
         OrderDetailsWithInvoice = this.getCompleteOrderInfo(orderNum);
      } catch (Exception var4) {
         var4.printStackTrace();
         LOGGER.error("Exception while looking up for the order" + var4.getMessage());
      }

      return (List)OrderDetailsWithInvoice;
   }

   public List<DkartReasonCodes> getAllDisRsnCode() {
      Object DkartReasonCodes = new ArrayList();

      try {
         LOGGER.info("lookup for order transactions using the criteria......");
         DkartReasonCodes = this.getAllDisRsnCodeDiscrpn();
      } catch (Exception var3) {
         var3.printStackTrace();
         LOGGER.error("Exception while looking up for the order" + var3.getMessage());
      }

      return (List)DkartReasonCodes;
   }

   public List<ExciseTaxItem> getExciseTax() {
      Object ExciseTaxItem = new ArrayList();

      try {
         LOGGER.info("lookup for order transactions using the criteria......");
         ExciseTaxItem = this.getAllExciseTaxItem();
      } catch (Exception var3) {
         var3.printStackTrace();
         LOGGER.error("Exception while looking up for the order" + var3.getMessage());
      }

      return (List)ExciseTaxItem;
   }

   public String getTransactionsPrintcomment(String criteria) {
      String result = null;

      try {
         LOGGER.info("lookup for order transactions using the criteria......");
         result = this.lookUpOrdersOrInvoicesForComment(criteria);
      } catch (Exception var4) {
         var4.printStackTrace();
         LOGGER.error("Exception while looking up for the order" + var4.getMessage());
      }

      return result;
   }

   public String disablePermissionForEmpl(Long empRoleId, String functionId) {
      String Disable_option = null;

      try {
         LOGGER.info("lookup for order transactions using the criteria......");
         Disable_option = this.disablePermissionForAll(empRoleId, functionId);
      } catch (Exception var5) {
         var5.printStackTrace();
         LOGGER.error("Exception while looking up for the order" + var5.getMessage());
      }

      return Disable_option;
   }

   public OrderTranHeader[] getCustomerSiteInvoices(OrderTransactionSearchCriteriaIfc criteria) {
      OrderTranHeader[] transactionHeaders = null;

      try {
         LOGGER.info("lookup for order transactions using the criteria: \n\t" + criteria);
         transactionHeaders = this.lookUpOrderInvoices(criteria);
      } catch (Exception var4) {
         var4.printStackTrace();
         LOGGER.error("Exception while looking up for the order" + var4.getMessage());
      }

      return transactionHeaders;
   }

   public OrderTranHeader[] getCustomerSiteAllInvoices(OrderTransactionSearchCriteriaIfc criteria, String emplID, String empRoleAcc, List<Integer> divIds) {
      OrderTranHeader[] transactionHeaders = null;

      try {
         LOGGER.info("lookup for order transactions using the criteria: \n\t" + criteria);
         transactionHeaders = this.lookUpOrderAllInvoices(criteria, emplID, empRoleAcc, divIds);
      } catch (Exception var7) {
         var7.printStackTrace();
         LOGGER.error("Exception while looking up for the order" + var7.getMessage());
      }

      return transactionHeaders;
   }

   public OrderTranHeader createNewOrder(OrderTranHeader transaction) {
      LOGGER.info("creating new order Id......");
      OrderTranHeaderPK headerPk = new OrderTranHeaderPK();
      String storeID = "";

      try {
         if (transaction.getCustomer().getCustomerHeader().getCustomerHeaderPK() != null) {
            storeID = this.lookupCustomer.getCustomerStoreID(transaction.getCustomer().getCustomerHeader().getCustomerHeaderPK().getCustId());
         }

         if (storeID.equalsIgnoreCase("")) {
            storeID = ConfigUtils.getInstance().getSDSStoreID();
         }
      } catch (Exception var15) {
         var15.printStackTrace();

         try {
            storeID = ConfigUtils.getInstance().getSDSStoreID();
         } catch (Exception var14) {
            var14.printStackTrace();
         }
      }

      headerPk.setRtStrId(storeID);
      SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
      String tranDate = format.format(new Date());
      headerPk.setDcDyOrd(tranDate);

      try {
         headerPk.setOrdWs(ConfigUtils.getInstance().getSDSWorkstationID());
      } catch (Exception var13) {
         LOGGER.error(var13);
      }

      long tranSequenceId = this.transactionService.getTranSeq(storeID);
      headerPk.setTrnSeq(tranSequenceId);
      transaction.setId(headerPk);
      transaction.setTsOrdBgn(new Date());
      OrderTranSum sum = new OrderTranSum();
      sum.setIdOrd(this.getOrderId(transaction));
      OrderTranSumPK sumPK = new OrderTranSumPK();
      sumPK.setRtStrId(headerPk.getRtStrId());
      sumPK.setOrdWs(headerPk.getOrdWs());
      sumPK.setTrnSeq(headerPk.getTrnSeq());
      sumPK.setDcDyOrd(headerPk.getDcDyOrd());
      sum.setId(sumPK);
      sum.setOrdTranHeader(transaction);
      transaction.setOrdTy("23");
      transaction.setScOrd(BigDecimal.ZERO);
      transaction.setTransactionStatus(BigDecimal.ONE);
      Date currTime = new Date();
      transaction.setTsOrdBgn(currTime);
      transaction.setTsCrtRcrd(currTime);
      transaction.setOrdTranSum(sum);
      LOGGER.info("Fetching all Reason Codes");
      transaction.setReasonCodes(this.getAllReasonCodes());
      LOGGER.info("Feteched Reason Code" + transaction.getReasonCodes().size());

      try {
         EntityManager em = this.emf.createEntityManager();
         em.getTransaction().begin();
         em.persist(transaction);
         em.getTransaction().commit();
      } catch (Exception var12) {
         LOGGER.error("Error Occured in saving the order tran object before quote", var12);
      }

      return transaction;
   }

   public String getOrderId(OrderTranHeader transaction) {
      StringBuffer sb = new StringBuffer();
      LOGGER.info("setting up new order Id......");

      try {
         sb.append(transaction.getId().getRtStrId());
         sb.append(transaction.getId().getOrdWs());
         sb.append(transaction.getId().getDcDyOrd().replace("-", ""));
         sb.append(transaction.getId().getTrnSeq());
      } catch (Exception var4) {
         var4.printStackTrace();
         LOGGER.error("error while setting up the order id in getOrderId " + var4.getMessage());
      }

      return sb.toString();
   }

   public boolean saveOrderTransaction(OrderTranHeader transaction) throws OrderTransactionException {
      LOGGER.info("persisting order transaction");
      boolean transactionSavedSuccessfully = this.saveCompletedTransactions(transaction);
      LOGGER.info("transaction save " + transactionSavedSuccessfully);
      return transactionSavedSuccessfully;
   }

   public OrderTranHeader saveQuote(OrderTranHeader transaction) throws OrderTransactionException {
      EntityManager em = this.getEntityManager();

      try {
         if (!em.getTransaction().isActive()) {
            em.getTransaction().begin();
         }

         LOGGER.warn("Quoting the transaction" + transaction);
         transaction.setIdTrlogBtch("-1");
         transaction.setOrdTy("23");
         transaction.setIdTlogBtch(new BigDecimal("-1"));
         long count = 1L;
         Iterator var6 = transaction.getOrdTranLineItems().iterator();

         while(true) {
            OrderTranLineItem orderTranLineItem;
            List discountItems;
            do {
               if (!var6.hasNext()) {
                  OrderTranSum orderTranSum = transaction.getOrdTranSum();
                  OrderTranSumPK orderTranSumPK = new OrderTranSumPK();
                  orderTranSumPK.setDcDyOrd(transaction.getId().getDcDyOrd());
                  orderTranSumPK.setOrdWs(transaction.getId().getOrdWs());
                  orderTranSumPK.setRtStrId(transaction.getId().getRtStrId());
                  orderTranSumPK.setTrnSeq(transaction.getId().getTrnSeq());
                  orderTranSum.setId(orderTranSumPK);
                  if (transaction.getCustomer() != null) {
                     orderTranSum.setOrdIdCt(transaction.getCustomer().getCustomerHeader().getCustomerHeaderPK().getCustId());
                  }

                  if (this.quoteExists(transaction)) {
                     em.merge(transaction);
                  } else {
                     em.persist(transaction);
                  }

                  em.getTransaction().commit();
                  em.getEntityManagerFactory().getCache().evictAll();
                  return transaction;
               }

               orderTranLineItem = (OrderTranLineItem)var6.next();
               System.out.println(orderTranLineItem);
               OrderTranLineItemPK orderTranLineItemPK = new OrderTranLineItemPK();
               if (orderTranLineItem.getId() != null) {
                  orderTranLineItemPK = orderTranLineItem.getId();
               } else {
                  orderTranLineItemPK.setOrdLnItmSeq(count);
                  ++count;
               }

               orderTranLineItemPK.setDcDyOrd(transaction.getId().getDcDyOrd());
               orderTranLineItemPK.setOrdWs(transaction.getId().getOrdWs());
               orderTranLineItemPK.setRtStrId(transaction.getId().getRtStrId());
               orderTranLineItemPK.setTrnSeq(transaction.getId().getTrnSeq());
               orderTranLineItem.setId(orderTranLineItemPK);
               if (orderTranLineItem.getPluItem() != null && orderTranLineItem.getPluItem().getItem().getItm() != null) {
                  orderTranLineItem.setUomSls(orderTranLineItem.getPluItem().getItem().getItm().getSlsUomCd());
               }

               orderTranLineItem.setOrdTranHeader(transaction);
               discountItems = orderTranLineItem.getOrdTranDscItms();
            } while(discountItems == null);

            long count1 = 1L;
            Iterator var12 = orderTranLineItem.getOrdTranDscItms().iterator();

            while(var12.hasNext()) {
               OrderTranDiscountItem orderTranDiscountItem = (OrderTranDiscountItem)var12.next();
               OrderTranDiscountItemPK orderTranDiscountItemPK = new OrderTranDiscountItemPK();
               orderTranDiscountItemPK.setDcDyOrd(orderTranLineItem.getId().getDcDyOrd());
               orderTranDiscountItemPK.setDiscSeqNum(count1);
               orderTranDiscountItemPK.setOrdLnItmSeq(orderTranLineItem.getId().getOrdLnItmSeq());
               orderTranDiscountItemPK.setOrdWs(orderTranLineItem.getId().getOrdWs());
               orderTranDiscountItemPK.setRtStrId(orderTranLineItem.getId().getRtStrId());
               orderTranDiscountItemPK.setTrnSeq(orderTranLineItem.getId().getTrnSeq());
               ++count1;
               orderTranDiscountItem.setId(orderTranDiscountItemPK);
               orderTranDiscountItem.setOrdTranLineItem(orderTranLineItem);
            }

            if (discountItems.size() > 0) {
               orderTranLineItem.setFlItmDsc("0");
            } else {
               orderTranLineItem.setFlItmDsc("1");
            }
         }
      } catch (Exception var14) {
         return null;
      }
   }

   protected EntityManager getEntityManager() {
      return this.emf.createEntityManager();
   }

   private boolean quoteExists(OrderTranHeader transaction) {
      if (transaction.getOrdTranSum() != null) {
         String orderID = transaction.getOrdTranSum().getIdOrd();
         Query query = this.getEntityManager().createNamedQuery("QUOTE_SEARCH_WITH_ORDER_ID", OrderTranSum.class);
         query.setParameter("idOrd", orderID);
         List<OrderTranSum> orderTranSumList = query.getResultList();
         if (orderTranSumList.size() > 0) {
            return true;
         }
      }

      return false;
   }

   public boolean isLPONumberDuplicate(OrderTranHeader transaction, String lpoNum) throws OrderTransactionException {
      LOGGER.info("Validating LPO Number for duplicate. Entered LPO Number: " + lpoNum);
      if (transaction.getOrdTranSum() != null) {
         String orderID = transaction.getOrdTranSum().getIdOrd();
         LOGGER.info("Order Id: " + orderID);
         Query query = this.getEntityManager().createNamedQuery("QUOTE_SEARCH_WITH_LPO_NUM", OrderTranSum.class);
         query.setParameter("custLpoNum", lpoNum);
         List<OrderTranSum> orderTranSumList = query.getResultList();
         if (orderTranSumList.size() > 0) {
            Iterator var7 = orderTranSumList.iterator();

            while(var7.hasNext()) {
               OrderTranSum ots = (OrderTranSum)var7.next();
               if (orderID != null && !orderID.isEmpty() && !ots.getIdOrd().equals(orderID)) {
                  LOGGER.info("LPO Number already exists for Order Number: " + ots.getIdOrd());
                  return true;
               }
            }
         }
      }

      return false;
   }

   public boolean updateTrasnactionBatchId(OrderTranHeader transaction) throws OrderTransactionException {
      boolean transactionSavedSuccessfully = this.saveCompletedTransactions(transaction);
      return transactionSavedSuccessfully;
   }

   public Map<String, Map<String, String>> getAllReasonCodes() {
      Map<String, Map<String, String>> reasonCodes = new HashMap();
      EntityManager em = this.getEntityManager();
      Query qe = em.createQuery("select dkartReasonCodes from DkartReasonCodes dkartReasonCodes");
      List<DkartReasonCodes> allReasons = qe.getResultList();
      Iterator var6 = allReasons.iterator();

      while(var6.hasNext()) {
         DkartReasonCodes alRsn = (DkartReasonCodes)var6.next();
         if (reasonCodes.containsKey(alRsn.getRsnGrpNm())) {
            ((Map)reasonCodes.get(alRsn.getRsnGrpNm())).put((new Long(alRsn.getRsnCode())).toString(), alRsn.getRsnDesc());
         } else {
            Map<String, String> codeName = new HashMap();
            codeName.put((new Long(alRsn.getRsnCode())).toString(), alRsn.getRsnDesc());
            reasonCodes.put(alRsn.getRsnGrpNm(), codeName);
         }
      }

      return reasonCodes;
   }

   public static void main(String[] args) {
   }

   public List<CustomerIfc> getOrderIdByItemId(String Item_Id) {
      return this.getOrdIdListbyItemId(Item_Id);
   }

   public boolean savePayments(TranLineItemTender[] tenders) {
      boolean savedSuccessFully = false;

      try {
         this.saveTenderLineItems(tenders);
         savedSuccessFully = true;
      } catch (Exception var4) {
         savedSuccessFully = false;
         var4.printStackTrace();
         LOGGER.error("Exception occured while persisting the tender lines " + var4.getMessage());
      }

      return savedSuccessFully;
   }

   /** @deprecated */
   @Deprecated
   public PaymentDetails SavePaymentTransaction(PaymentDetails pd) {
      PaymentDetails result = null;
      SavePostPaymentTransaction spt = new SavePostPaymentTransaction();
      result = spt.saveTransaction(pd);
      return result;
   }

   public void updateCustomerCreditLimit(CustomerLimit customerLimits, BigDecimal totalAmountPaid) {
      BigDecimal pendingDue = customerLimits.getPendDue();
      BigDecimal newPendingDue = pendingDue.subtract(totalAmountPaid);
      BigDecimal availableCreditLimit = customerLimits.getAvCrdtLimit();
      BigDecimal newavailableCreditLimit = availableCreditLimit.add(totalAmountPaid);
      customerLimits.setAvCrdtLimit(newavailableCreditLimit);
      customerLimits.setPendDue(newPendingDue);
   }

   public OrderTranHeader[] getOrderbyCustomerInfo(OrderTransactionSearchCriteriaIfc search) {
      OrderTranHeader[] orders = new OrderTranHeader[10];
      orders = this.lookUpTransactionByCustomerInfo(orders, search);
      return orders;
   }

   public ArrayList<OrderTranHeader[]> getDelOrderbyCustid(String[] searchCustIds, CustomerSearchCriteria customerSearchCriteria) {
      ArrayList orders = new ArrayList();

      try {
         orders = this.lookUpOrdersbyCustIds(searchCustIds);
      } catch (OrderTransactionException var5) {
         var5.printStackTrace();
      }

      return orders;
   }

   public ArrayList<OrderTranHeader[]> getDelOrderIdByItemId(String Item_Id) {
      return this.getDelOrdIdListbyItemId(Item_Id);
   }

   public Vector<ClaimDetailTable> getClaimTableDetails(String status) {
      OrderTransactionUtility util = new OrderTransactionUtility();
      Vector<ClaimDetailTable> claimDetailTableList = new Vector();
      EntityManager em = this.getEntityManager();
      String claimTranHeaderQuery = "SELECT cth FROM ClaimTranHeader cth WHERE cth.scOrd=?1";
      Query query = em.createQuery(claimTranHeaderQuery, ClaimTranHeader.class);
      query.setParameter(1, new BigDecimal(status));
      List<ClaimTranHeader> claimTranHeaderList = query.getResultList();

      ClaimDetailTable cdt;
      for(Iterator var9 = claimTranHeaderList.iterator(); var9.hasNext(); claimDetailTableList.add(cdt)) {
         ClaimTranHeader claimTranHeade = (ClaimTranHeader)var9.next();
         cdt = new ClaimDetailTable();
         SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

         try {
            cdt.setClaimDate(dateFormat.parse(claimTranHeade.getId().getDcDyOrd()));
         } catch (ParseException var17) {
            var17.printStackTrace();
         }

         cdt.setClaimTotal(claimTranHeade.getClaimTranSum().getDkartNetTot());
         cdt.setClaimId(claimTranHeade.getClaimId());
         Map<String, String> o = (Map)this.getAllReasonCodes().get("Returns");
         cdt.setReasonCode((String)o.get(claimTranHeade.getRcRtnMr()));
         cdt.setSalesAgent(util.getEmployee(claimTranHeade.getEmId()));

         try {
            String customerId = claimTranHeade.getClaimTranSum().getOrdIdCt();
            cdt.setCustomerId(customerId);
            Query customerQ = em.createNamedQuery("CUSTOMER_LOOKUP_CUSTOMER_BY_ID", CustomerHeader.class).setParameter("customerId", customerId);
            CustomerHeader header = (CustomerHeader)customerQ.getSingleResult();
            cdt.setCustomerName(header.getCtNm());
         } catch (Exception var16) {
            LOGGER.error(var16);
         }
      }

      return claimDetailTableList;
   }

   public List<ClaimDetailTable> getRjectedClaimDateAndTotalDetails(String status, String emplName, List<Integer> divIds, String emplID, String claimID, Date from, Date to, String ClaimTotalFrom, String ClaimTotalTo, String itemID, String empRoleAcc) {
      ArrayList<String> claimIdList = new ArrayList();
      Vector<ClaimDetailTable> claimDetailTableList = new Vector();
      List<ClaimTranHeader> claimTranHeaderList = new ArrayList();
      List<RisplDkEmpMstr> RisplDkEmpMstrList = new ArrayList();
      OrderTransactionUtility util = new OrderTransactionUtility();
      EntityManager em = this.getEntityManager();
      Query query = null;
      Query SalesQuery = null;

      try {
         query = util.getClaimQueryByClaimDateTotalFromTo(divIds, emplName, empRoleAcc, emplID, claimID, from, to, ClaimTotalFrom, ClaimTotalTo, em);
         if (query != null) {
            if (util.isStatusRequired(status)) {
               query.setParameter("status", new BigDecimal(status));
            }

            claimTranHeaderList = query.getResultList();
         }
      } catch (Exception var34) {
         LOGGER.error(var34);
      }

      Iterator var21 = ((List)claimTranHeaderList).iterator();

      while(var21.hasNext()) {
         ClaimTranHeader claimTranHeade = (ClaimTranHeader)var21.next();
         ClaimDetailTable cdt = new ClaimDetailTable();
         SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

         try {
            cdt.setClaimDate(dateFormat.parse(claimTranHeade.getId().getDcDyOrd()));
         } catch (ParseException var33) {
            var33.printStackTrace();
         }

         try {
            cdt.setClaimTotal(claimTranHeade.getClaimTranSum().getDkartNetTot());
         } catch (Exception var32) {
            System.err.println(var32);
         }

         cdt.setClaimId(claimTranHeade.getClaimId());
         BigDecimal lineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getLineQntRtn() == null ? BigDecimal.ZERO : line.getLineQntRtn();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         BigDecimal ApprvedlineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getApprClaimQty() == null ? BigDecimal.ZERO : line.getApprClaimQty();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         BigDecimal WhreceivedlineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getWhReceiveQty() == null ? BigDecimal.ZERO : line.getWhReceiveQty();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         if (claimTranHeade.getScOrd().toString().equalsIgnoreCase("1")) {
            cdt.setQty(lineQntRtn.toString());
         } else if (!claimTranHeade.getScOrd().toString().equalsIgnoreCase("2") && !claimTranHeade.getScOrd().toString().equalsIgnoreCase("3") && !claimTranHeade.getScOrd().toString().equalsIgnoreCase("4")) {
            if (claimTranHeade.getScOrd().toString().equalsIgnoreCase("5")) {
               cdt.setQty(WhreceivedlineQntRtn.toString());
            } else {
               cdt.setQty(lineQntRtn.toString());
            }
         } else {
            cdt.setQty(ApprvedlineQntRtn.toString());
         }

         cdt.setStatus(this.getStatusOfClaim(claimTranHeade.getScOrd()));
         Map<String, String> o = (Map)this.getAllReasonCodes().get("Returns");
         cdt.setReasonCode((String)o.get(claimTranHeade.getRcRtnMr()));
         cdt.setSalesAgent(claimTranHeade.getEmId());

         String salesAgnetName;
         try {
            salesAgnetName = claimTranHeade.getClaimTranSum().getOrdIdCt();
            cdt.setCustomerId(salesAgnetName);
            Query customerQ = em.createNamedQuery("CUSTOMER_LOOKUP_CUSTOMER_BY_ID", CustomerHeader.class).setParameter("customerId", salesAgnetName);
            CustomerHeader header = (CustomerHeader)customerQ.getSingleResult();
            cdt.setCustomerName(header.getCtNm());
         } catch (Exception var31) {
            LOGGER.error(var31);
         }

         salesAgnetName = cdt.getSalesAgent();
         SalesQuery = util.getClaimSalesAgentNames(divIds, empRoleAcc, emplID, salesAgnetName, em);

         try {
            if (SalesQuery != null) {
               RisplDkEmpMstrList = SalesQuery.getResultList();
            } else {
               System.out.println("Query is empty: " + SalesQuery);
            }

            Iterator var37 = ((List)RisplDkEmpMstrList).iterator();

            while(var37.hasNext()) {
               RisplDkEmpMstr RisplDkEmpMstr = (RisplDkEmpMstr)var37.next();
               cdt.setSalesAgent(RisplDkEmpMstr.getEmpFstNme());
            }
         } catch (Exception var35) {
            var35.printStackTrace();
            System.out.println(var35);
         }

         if (!claimIdList.contains(cdt.getClaimId())) {
            claimDetailTableList.add(cdt);
            claimIdList.add(cdt.getClaimId());
         }
      }

      return claimDetailTableList;
   }

   public Vector<ClaimDetailTable> getRjectedClaimTableDetails(String status, String emplName, List<Integer> divIds, String emplID, String orderID, String claimID, String custInfo, String itemID, String empRoleAcc) {
      ArrayList<String> claimIdList = new ArrayList();
      Vector<ClaimDetailTable> claimDetailTableList = new Vector();
      List<ClaimTranHeader> claimTranHeaderList = new ArrayList();
      List<RisplDkEmpMstr> RisplDkEmpMstrList = new ArrayList();
      OrderTransactionUtility util = new OrderTransactionUtility();
      EntityManager em = this.getEntityManager();
      Query query = null;
      Query SalesQuery = null;

      try {
         if ((custInfo == null || custInfo.equalsIgnoreCase("")) && (itemID == null || itemID.equalsIgnoreCase(""))) {
            query = util.getClaimQueryByClaimID(custInfo, empRoleAcc, divIds, emplID, orderID, claimID, itemID, status, em);
         } else {
            query = util.getClaimQueryByItemIfo(itemID, custInfo, status, em, empRoleAcc, divIds, emplID);
         }

         if (query != null) {
            if (util.isStatusRequired(status)) {
               query.setParameter("status", new BigDecimal(status));
            }

            claimTranHeaderList = query.getResultList();
         }
      } catch (Exception var33) {
         LOGGER.error(var33);
         System.err.println(var33);
      }

      Iterator var19 = ((List)claimTranHeaderList).iterator();

      while(var19.hasNext()) {
         ClaimTranHeader claimTranHeade = (ClaimTranHeader)var19.next();
         ClaimDetailTable cdt = new ClaimDetailTable();
         SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

         try {
            cdt.setClaimDate(dateFormat.parse(claimTranHeade.getId().getDcDyOrd()));
         } catch (ParseException var31) {
            var31.printStackTrace();
         }

         try {
            cdt.setClaimTotal(claimTranHeade.getClaimTranSum().getDkartNetTot());
         } catch (Exception var30) {
            System.err.println(var30);
         }

         cdt.setClaimId(claimTranHeade.getClaimId());
         BigDecimal lineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getLineQntRtn() == null ? BigDecimal.ZERO : line.getLineQntRtn();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         BigDecimal ApprvedlineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getApprClaimQty() == null ? BigDecimal.ZERO : line.getApprClaimQty();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         BigDecimal WhreceivedlineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getWhReceiveQty() == null ? BigDecimal.ZERO : line.getWhReceiveQty();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         if (claimTranHeade.getScOrd().toString().equalsIgnoreCase("1")) {
            cdt.setQty(lineQntRtn.toString());
         } else if (!claimTranHeade.getScOrd().toString().equalsIgnoreCase("2") && !claimTranHeade.getScOrd().toString().equalsIgnoreCase("3") && !claimTranHeade.getScOrd().toString().equalsIgnoreCase("4")) {
            if (claimTranHeade.getScOrd().toString().equalsIgnoreCase("5")) {
               cdt.setQty(WhreceivedlineQntRtn.toString());
            } else {
               cdt.setQty(lineQntRtn.toString());
            }
         } else {
            cdt.setQty(ApprvedlineQntRtn.toString());
         }

         cdt.setStatus(this.getStatusOfClaim(claimTranHeade.getScOrd()));
         Map<String, String> o = (Map)this.getAllReasonCodes().get("Returns");
         cdt.setReasonCode((String)o.get(claimTranHeade.getRcRtnMr()));
         cdt.setSalesAgent(claimTranHeade.getEmId());

         String salesAgnetName;
         try {
            salesAgnetName = claimTranHeade.getClaimTranSum().getOrdIdCt();
            cdt.setCustomerId(salesAgnetName);
            Query customerQ = em.createNamedQuery("CUSTOMER_LOOKUP_CUSTOMER_BY_ID", CustomerHeader.class).setParameter("customerId", salesAgnetName);
            CustomerHeader header = (CustomerHeader)customerQ.getSingleResult();
            cdt.setCustomerName(header.getCtNm());
         } catch (Exception var29) {
            LOGGER.error(var29);
         }

         salesAgnetName = cdt.getSalesAgent();
         SalesQuery = util.getClaimSalesAgentNames(divIds, empRoleAcc, emplID, salesAgnetName, em);

         try {
            if (SalesQuery != null) {
               RisplDkEmpMstrList = SalesQuery.getResultList();
            } else {
               System.out.println("Query is empty: " + SalesQuery);
            }

            Iterator var35 = ((List)RisplDkEmpMstrList).iterator();

            while(var35.hasNext()) {
               RisplDkEmpMstr RisplDkEmpMstr = (RisplDkEmpMstr)var35.next();
               cdt.setSalesAgent(RisplDkEmpMstr.getEmpFstNme());
            }
         } catch (Exception var32) {
            var32.printStackTrace();
            System.out.println(var32);
         }

         if (!claimIdList.contains(cdt.getClaimId())) {
            claimDetailTableList.add(cdt);
            claimIdList.add(cdt.getClaimId());
         }
      }

      return claimDetailTableList;
   }

   public List<ClaimDetailTable> getRejectedClaimSearchByClaim(String status, String empRoleAcc, List<Integer> divIds, String emplID, String claimID, Date parsed_from, Date parsed_to, String claimTotalFrom, String claimTotalTo, String itemId) {
      ArrayList<String> claimIdList = new ArrayList();
      Vector<ClaimDetailTable> claimDetailTableList = new Vector();
      List<ClaimTranHeader> claimTranHeaderList = new ArrayList();
      List<RisplDkEmpMstr> RisplDkEmpMstrList = new ArrayList();
      OrderTransactionUtility util = new OrderTransactionUtility();
      EntityManager em = this.getEntityManager();
      Query query = null;
      Query SalesQuery = null;

      try {
         query = util.getRejectClaimByClaim(status, empRoleAcc, divIds, emplID, claimID, parsed_from, parsed_to, claimTotalFrom, claimTotalTo, itemId, em);
         if (query != null) {
            if (util.isStatusRequired(status)) {
               query.setParameter("status", new BigDecimal(status));
            }

            claimTranHeaderList = query.getResultList();
         }
      } catch (Exception var33) {
         LOGGER.error(var33);
         System.err.println(var33);
      }

      Iterator var20 = ((List)claimTranHeaderList).iterator();

      while(var20.hasNext()) {
         ClaimTranHeader claimTranHeade = (ClaimTranHeader)var20.next();
         ClaimDetailTable cdt = new ClaimDetailTable();
         SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

         try {
            cdt.setClaimDate(dateFormat.parse(claimTranHeade.getId().getDcDyOrd()));
         } catch (ParseException var32) {
            var32.printStackTrace();
         }

         try {
            cdt.setClaimTotal(claimTranHeade.getClaimTranSum().getDkartNetTot());
         } catch (Exception var31) {
            System.err.println(var31);
         }

         cdt.setClaimId(claimTranHeade.getClaimId());
         BigDecimal lineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getLineQntRtn() == null ? BigDecimal.ZERO : line.getLineQntRtn();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         BigDecimal ApprvedlineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getApprClaimQty() == null ? BigDecimal.ZERO : line.getApprClaimQty();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         BigDecimal WhreceivedlineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getWhReceiveQty() == null ? BigDecimal.ZERO : line.getWhReceiveQty();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         if (claimTranHeade.getScOrd().toString().equalsIgnoreCase("1")) {
            cdt.setQty(lineQntRtn.toString());
         } else if (!claimTranHeade.getScOrd().toString().equalsIgnoreCase("2") && !claimTranHeade.getScOrd().toString().equalsIgnoreCase("3") && !claimTranHeade.getScOrd().toString().equalsIgnoreCase("4")) {
            if (claimTranHeade.getScOrd().toString().equalsIgnoreCase("5")) {
               cdt.setQty(WhreceivedlineQntRtn.toString());
            } else {
               cdt.setQty(lineQntRtn.toString());
            }
         } else {
            cdt.setQty(ApprvedlineQntRtn.toString());
         }

         cdt.setStatus(this.getStatusOfClaim(claimTranHeade.getScOrd()));
         Map<String, String> o = (Map)this.getAllReasonCodes().get("Returns");
         cdt.setReasonCode((String)o.get(claimTranHeade.getRcRtnMr()));
         cdt.setSalesAgent(claimTranHeade.getEmId());

         String salesAgnetName;
         try {
            salesAgnetName = claimTranHeade.getClaimTranSum().getOrdIdCt();
            cdt.setCustomerId(salesAgnetName);
            Query customerQ = em.createNamedQuery("CUSTOMER_LOOKUP_CUSTOMER_BY_ID", CustomerHeader.class).setParameter("customerId", salesAgnetName);
            CustomerHeader header = (CustomerHeader)customerQ.getSingleResult();
            cdt.setCustomerName(header.getCtNm());
         } catch (Exception var30) {
            LOGGER.error(var30);
         }

         salesAgnetName = cdt.getSalesAgent();
         SalesQuery = util.getClaimSalesAgentNames(divIds, empRoleAcc, emplID, salesAgnetName, em);

         try {
            if (SalesQuery != null) {
               RisplDkEmpMstrList = SalesQuery.getResultList();
            } else {
               System.out.println("Query is empty: " + SalesQuery);
            }

            Iterator var36 = ((List)RisplDkEmpMstrList).iterator();

            while(var36.hasNext()) {
               RisplDkEmpMstr RisplDkEmpMstr = (RisplDkEmpMstr)var36.next();
               cdt.setSalesAgent(RisplDkEmpMstr.getEmpFstNme());
            }
         } catch (Exception var34) {
            var34.printStackTrace();
            System.out.println(var34);
         }

         if (!claimIdList.contains(cdt.getClaimId())) {
            claimDetailTableList.add(cdt);
            claimIdList.add(cdt.getClaimId());
         }
      }

      return claimDetailTableList;
   }

   public List<ClaimDetailTable> getRejectedClaimSearchByOrder(String status, String empRoleAcc, List<Integer> divIds, String emplID, String orderID, Date parsed_from, Date parsed_to, String order_total_from, String order_total_to, String itemId) {
      ArrayList<String> claimIdList = new ArrayList();
      Vector<ClaimDetailTable> claimDetailTableList = new Vector();
      List<ClaimTranHeader> claimTranHeaderList = new ArrayList();
      List<RisplDkEmpMstr> RisplDkEmpMstrList = new ArrayList();
      OrderTransactionUtility util = new OrderTransactionUtility();
      EntityManager em = this.getEntityManager();
      Query query = null;
      Query SalesQuery = null;

      try {
         query = util.getRejectClaimByOrder(status, empRoleAcc, divIds, emplID, orderID, parsed_from, parsed_to, order_total_from, order_total_to, itemId, em);
         if (query != null) {
            util.isStatusRequired(status);
            claimTranHeaderList = query.getResultList();
         }
      } catch (Exception var33) {
         LOGGER.error(var33);
         System.err.println(var33);
      }

      Iterator var20 = ((List)claimTranHeaderList).iterator();

      while(var20.hasNext()) {
         ClaimTranHeader claimTranHeade = (ClaimTranHeader)var20.next();
         ClaimDetailTable cdt = new ClaimDetailTable();
         SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

         try {
            cdt.setClaimDate(dateFormat.parse(claimTranHeade.getId().getDcDyOrd()));
         } catch (ParseException var32) {
            var32.printStackTrace();
         }

         try {
            cdt.setClaimTotal(claimTranHeade.getClaimTranSum().getDkartNetTot());
         } catch (Exception var31) {
            System.err.println(var31);
         }

         cdt.setClaimId(claimTranHeade.getClaimId());
         BigDecimal lineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getLineQntRtn() == null ? BigDecimal.ZERO : line.getLineQntRtn();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         BigDecimal ApprvedlineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getApprClaimQty() == null ? BigDecimal.ZERO : line.getApprClaimQty();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         BigDecimal WhreceivedlineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getWhReceiveQty() == null ? BigDecimal.ZERO : line.getWhReceiveQty();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         if (claimTranHeade.getScOrd().toString().equalsIgnoreCase("1")) {
            cdt.setQty(lineQntRtn.toString());
         } else if (!claimTranHeade.getScOrd().toString().equalsIgnoreCase("2") && !claimTranHeade.getScOrd().toString().equalsIgnoreCase("3") && !claimTranHeade.getScOrd().toString().equalsIgnoreCase("4")) {
            if (claimTranHeade.getScOrd().toString().equalsIgnoreCase("5")) {
               cdt.setQty(WhreceivedlineQntRtn.toString());
            } else {
               cdt.setQty(lineQntRtn.toString());
            }
         } else {
            cdt.setQty(ApprvedlineQntRtn.toString());
         }

         cdt.setStatus(this.getStatusOfClaim(claimTranHeade.getScOrd()));
         Map<String, String> o = (Map)this.getAllReasonCodes().get("Returns");
         cdt.setReasonCode((String)o.get(claimTranHeade.getRcRtnMr()));
         cdt.setSalesAgent(claimTranHeade.getEmId());

         String salesAgnetName;
         try {
            salesAgnetName = claimTranHeade.getClaimTranSum().getOrdIdCt();
            cdt.setCustomerId(salesAgnetName);
            Query customerQ = em.createNamedQuery("CUSTOMER_LOOKUP_CUSTOMER_BY_ID", CustomerHeader.class).setParameter("customerId", salesAgnetName);
            CustomerHeader header = (CustomerHeader)customerQ.getSingleResult();
            cdt.setCustomerName(header.getCtNm());
         } catch (Exception var30) {
            LOGGER.error(var30);
         }

         salesAgnetName = cdt.getSalesAgent();
         SalesQuery = util.getClaimSalesAgentNames(divIds, empRoleAcc, emplID, salesAgnetName, em);

         try {
            if (SalesQuery != null) {
               RisplDkEmpMstrList = SalesQuery.getResultList();
            } else {
               System.out.println("Query is empty: " + SalesQuery);
            }

            Iterator var36 = ((List)RisplDkEmpMstrList).iterator();

            while(var36.hasNext()) {
               RisplDkEmpMstr RisplDkEmpMstr = (RisplDkEmpMstr)var36.next();
               cdt.setSalesAgent(RisplDkEmpMstr.getEmpFstNme());
            }
         } catch (Exception var34) {
            var34.printStackTrace();
            System.out.println(var34);
         }

         if (!claimIdList.contains(cdt.getClaimId())) {
            claimDetailTableList.add(cdt);
            claimIdList.add(cdt.getClaimId());
         }
      }

      return claimDetailTableList;
   }

   public List<ClaimDetailTable> getRejectedClaimSearchByCustomerInfo(String status, String empRoleAcc, List<Integer> divIds, String emplID, String orderID, String claimID, String customerInfo, String itemId) {
      ArrayList<String> claimIdList = new ArrayList();
      Vector<ClaimDetailTable> claimDetailTableList = new Vector();
      List<ClaimTranHeader> claimTranHeaderList = new ArrayList();
      List<RisplDkEmpMstr> RisplDkEmpMstrList = new ArrayList();
      OrderTransactionUtility util = new OrderTransactionUtility();
      EntityManager em = this.getEntityManager();
      Query query = null;
      Query SalesQuery = null;

      try {
         if ((customerInfo == null || customerInfo.equalsIgnoreCase("")) && (itemId == null || itemId.equalsIgnoreCase(""))) {
            query = util.getRejectClaimByCustomerInfo(status, empRoleAcc, divIds, emplID, orderID, claimID, customerInfo, itemId, em);
         } else {
            query = util.getClaimQueryByItemIfo(itemId, customerInfo, status, em, empRoleAcc, divIds, emplID);
         }

         if (query != null) {
            util.isStatusRequired(status);
            claimTranHeaderList = query.getResultList();
         }
      } catch (Exception var32) {
         LOGGER.error(var32);
         System.err.println(var32);
      }

      Iterator var18 = ((List)claimTranHeaderList).iterator();

      while(var18.hasNext()) {
         ClaimTranHeader claimTranHeade = (ClaimTranHeader)var18.next();
         ClaimDetailTable cdt = new ClaimDetailTable();
         SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

         try {
            cdt.setClaimDate(dateFormat.parse(claimTranHeade.getId().getDcDyOrd()));
         } catch (ParseException var30) {
            var30.printStackTrace();
         }

         try {
            cdt.setClaimTotal(claimTranHeade.getClaimTranSum().getDkartNetTot());
         } catch (Exception var29) {
            System.err.println(var29);
         }

         cdt.setClaimId(claimTranHeade.getClaimId());
         BigDecimal lineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getLineQntRtn() == null ? BigDecimal.ZERO : line.getLineQntRtn();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         BigDecimal ApprvedlineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getApprClaimQty() == null ? BigDecimal.ZERO : line.getApprClaimQty();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         BigDecimal WhreceivedlineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getWhReceiveQty() == null ? BigDecimal.ZERO : line.getWhReceiveQty();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         if (claimTranHeade.getScOrd().toString().equalsIgnoreCase("1")) {
            cdt.setQty(lineQntRtn.toString());
         } else if (!claimTranHeade.getScOrd().toString().equalsIgnoreCase("2") && !claimTranHeade.getScOrd().toString().equalsIgnoreCase("3") && !claimTranHeade.getScOrd().toString().equalsIgnoreCase("4")) {
            if (claimTranHeade.getScOrd().toString().equalsIgnoreCase("5")) {
               cdt.setQty(WhreceivedlineQntRtn.toString());
            } else {
               cdt.setQty(lineQntRtn.toString());
            }
         } else {
            cdt.setQty(ApprvedlineQntRtn.toString());
         }

         cdt.setStatus(this.getStatusOfClaim(claimTranHeade.getScOrd()));
         Map<String, String> o = (Map)this.getAllReasonCodes().get("Returns");
         cdt.setReasonCode((String)o.get(claimTranHeade.getRcRtnMr()));
         cdt.setSalesAgent(claimTranHeade.getEmId());

         String salesAgnetName;
         try {
            salesAgnetName = claimTranHeade.getClaimTranSum().getOrdIdCt();
            cdt.setCustomerId(salesAgnetName);
            Query customerQ = em.createNamedQuery("CUSTOMER_LOOKUP_CUSTOMER_BY_ID", CustomerHeader.class).setParameter("customerId", salesAgnetName);
            CustomerHeader header = (CustomerHeader)customerQ.getSingleResult();
            cdt.setCustomerName(header.getCtNm());
         } catch (Exception var28) {
            LOGGER.error(var28);
         }

         salesAgnetName = cdt.getSalesAgent();
         SalesQuery = util.getClaimSalesAgentNames(divIds, empRoleAcc, emplID, salesAgnetName, em);

         try {
            if (SalesQuery != null) {
               RisplDkEmpMstrList = SalesQuery.getResultList();
            } else {
               System.out.println("Query is empty: " + SalesQuery);
            }

            Iterator var34 = ((List)RisplDkEmpMstrList).iterator();

            while(var34.hasNext()) {
               RisplDkEmpMstr RisplDkEmpMstr = (RisplDkEmpMstr)var34.next();
               cdt.setSalesAgent(RisplDkEmpMstr.getEmpFstNme());
            }
         } catch (Exception var31) {
            var31.printStackTrace();
            System.out.println(var31);
         }

         if (!claimIdList.contains(cdt.getClaimId())) {
            claimDetailTableList.add(cdt);
            claimIdList.add(cdt.getClaimId());
         }
      }

      return claimDetailTableList;
   }

   public ClaimTranHeader getClaimTranHeader(String claimID, String calimStatus) {
      ClaimTranHeader result = null;
      Query query = null;
      EntityManager em = this.getEntityManager();
      String claimTranHeaderQuery;
      if (calimStatus != null) {
         claimTranHeaderQuery = "SELECT cth FROM ClaimTranHeader cth WHERE cth.claimId=?1 AND cth.scOrd=?2";
         query = em.createQuery(claimTranHeaderQuery, ClaimTranHeader.class);
         query.setParameter(1, claimID).setParameter(2, new BigDecimal(calimStatus));
      } else {
         claimTranHeaderQuery = "SELECT cth FROM ClaimTranHeader cth WHERE cth.claimId=?1";
         query = em.createQuery(claimTranHeaderQuery, ClaimTranHeader.class);
         query.setParameter(1, claimID);
      }

      List<ClaimTranHeader> claimTranHeaderList = query.getResultList();
      if (claimTranHeaderList.size() > 0) {
         result = (ClaimTranHeader)claimTranHeaderList.get(0);
      }

      return result;
   }

   public boolean persistClaimTransaction(ClaimTranHeader cth) {
      boolean result = false;

      try {
         cth.setTsMdfRcrd(new Date());
         EntityManager em = this.getEntityManager();
         em.getTransaction().begin();
         em.merge(cth);
         em.getTransaction().commit();
         result = true;
      } catch (Exception var6) {
         try {
            cth.setTsMdfRcrd(new Date());
            EntityManager em = this.getEntityManager();
            em.getTransaction().begin();
            em.persist(cth);
            em.getTransaction().commit();
            result = true;
         } catch (Exception var5) {
            LOGGER.error(var6);
         }
      }

      return result;
   }

   public CustomerHeader getCustomerHeader(String customerId) {
      CustomerHeader header = null;

      try {
         EntityManager em = this.getEntityManager();
         Query customerQ = em.createNamedQuery("CUSTOMER_LOOKUP_CUSTOMER_BY_ID", CustomerHeader.class).setParameter("customerId", customerId);
         header = (CustomerHeader)customerQ.getSingleResult();
      } catch (Exception var5) {
         LOGGER.error(var5);
      }

      return header;
   }

   public String SaveClaimTransaction(ClaimTranHeader cth) {
      String result = "Error";

      try {
         EntityManager em = this.getEntityManager();
         em.getTransaction().begin();
         OrderTranHeader orderTranHeader = null;
         OrderTranHeader oth = new OrderTranHeader();
         OrderTranHeaderPK othpk = new OrderTranHeaderPK();
         String storeID = cth.getId().getRtStrId();
         SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
         SimpleDateFormat trxidFormat = new SimpleDateFormat("yyyyMMdd");
         String tranDate = format.format(new Date());
         long tranSequenceId = this.transactionService.getTranSeq(storeID);
         String workStationId = ConfigUtils.getInstance().getSDSWorkstationID();
         ClaimTranSum csum = cth.getClaimTranSum();
         String orderId = csum.getIdOrd();
         othpk.setRtStrId(storeID);
         othpk.setDcDyOrd(tranDate);
         othpk.setOrdWs(workStationId);
         othpk.setTrnSeq(tranSequenceId);
         oth.setId(othpk);
         oth.setTsOrdBgn(new Date());
         oth.setTsOrdEnd(new Date());
         oth.setFlInvCncl(cth.getFlInvCncl());
         oth.setAcceptClaimId(cth.getClaimId());
         OrderTranSumPK sumpk = new OrderTranSumPK();
         sumpk.setRtStrId(storeID);
         sumpk.setDcDyOrd(tranDate);
         sumpk.setOrdWs(workStationId);
         sumpk.setTrnSeq(tranSequenceId);
         OrderTranSum sum = new OrderTranSum();
         sum.setId(sumpk);
         sum.setIdOrd(storeID + workStationId + trxidFormat.format(new Date()) + tranSequenceId);
         sum.setDkartNetTot(csum.getDkartNetTot());
         sum.setDkartTndTot(csum.getDkartTndTot());
         sum.setDkartDscTot(csum.getDkartDscTot());
         sum.setFlSndCtPhy("0");
         sum.setDkartTaxIncTot(csum.getDkartTaxIncTot());
         sum.setDkartSlsTot(csum.getDkartSlsTot());
         sum.setOrdIdCt(csum.getOrdIdCt());
         sum.setOrdTranHeader(oth);
         sum.setOrigOrderId(orderId);
         oth.setOrdTranLineItems(this.convertClaimLineItemtoOrder(cth.getClaimTranLineItems(), oth));
         Customer customer = new Customer();
         customer.setCustomerLimits(this.getCustomerlimits(csum.getOrdIdCt()));
         oth.setCustomer(customer);
         oth.setOrdTranSum(sum);
         oth.setOrdTy("2");
         oth.setIdOpr(cth.getEmId());
         oth.setEmId(cth.getEmId());
         oth.setIdTrlogBtch("-1");
         oth.setIdTlogBtch(new BigDecimal("-1"));
         oth.setScPstPrcs(new BigDecimal("01"));
         oth.setTransactionStatus(new BigDecimal("2"));
         oth.setScOrd(new BigDecimal("2"));
         oth.setReasonCodes(this.getAllReasonCodes());
         oth.setReturnReasonCode(cth.getRcRtnMr());
         TranLineItemTender tlid = new TranLineItemTender();
         TranLineItemTenderPK pk = new TranLineItemTenderPK();
         pk.setDcDyOrd(oth.getId().getDcDyOrd());
         pk.setOrdWs(oth.getId().getOrdWs());
         pk.setRtStrId(oth.getId().getRtStrId());
         pk.setTrnSeq(oth.getId().getTrnSeq());
         pk.setTrnLnItmSeq(1L);
         tlid.setId(pk);
         tlid.setTyTnd("CARD");
         tlid.setIdOrd("HOUSE");
         tlid.setMoItmLnTnd(sum.getDkartNetTot());
         tlid.setIdAcntNmb(csum.getOrdIdCt());
         if (orderId == null) {
            if (cth.getScTran() != null) {
               oth.setIdBtchInvResv(cth.getScTran().toString());
            }

            if (cth.getCtDvrInf() != null) {
               oth.setCtDvrInf(cth.getCtDvrInf());
            }
         } else {
            if (cth.getFlInvCncl() != null && cth.getFlInvCncl().equalsIgnoreCase("Y")) {
               LOGGER.info("Fetching the Invoice cancelled related OrderTranHeader");
               orderTranHeader = this.getOrderByOrderID(orderId, "24", new BigDecimal(5), new BigDecimal(2));
               LOGGER.info("Invoice Cancelled Order related OrderTranHeader has been fetched");
               if (orderTranHeader == null) {
                  LOGGER.info("Fetching the Invoice cancelled related to partially shipped order");
                  orderTranHeader = this.getOrderByOrderID(orderId, "26", new BigDecimal(4), new BigDecimal(2));
                  LOGGER.info("Invoice Cancelled Order related partially shipped orderr has been fetched");
               }
            } else {
               LOGGER.info("Fetching the Delivered Order related OrderTranHeader");
               orderTranHeader = this.getOrderByOrderID(orderId, "24", new BigDecimal(7), new BigDecimal(2));
               LOGGER.info("Delivered Order related OrderTranHeader has been fetched");
            }

            oth.setIdBtchInvResv(orderTranHeader.getIdBtchInvResv());
            oth.setCtDvrInf(orderTranHeader.getCtDvrInf());
            oth.setCtDvrInfoIns(orderTranHeader.getCtDvrInfoIns());
            oth.setTsCrtRcrd(new Date());
            oth.getOrdTranSum().setOrdDlvrDate(orderTranHeader.getOrdTranSum().getOrdDlvrDate());
            oth.getOrdTranSum().setOrdDlvrTimePeriod(orderTranHeader.getOrdTranSum().getOrdDlvrTimePeriod());
            oth.getOrdTranSum().setOrdEfDate(orderTranHeader.getOrdTranSum().getOrdEfDate());
            oth.getOrdTranSum().setOrdLvlDvr(orderTranHeader.getOrdTranSum().getOrdLvlDvr());
            if (orderTranHeader != null && orderTranHeader.getOrdTranLpo() != null) {
               OrderTransactionLpoPK lpoPK = new OrderTransactionLpoPK();
               lpoPK.setRtStrId(storeID);
               lpoPK.setDcDyOrd(tranDate);
               lpoPK.setOrdWs(workStationId);
               lpoPK.setTrnSeq(tranSequenceId);
               OrderTransactionLpo orderTransactionLpo = new OrderTransactionLpo();
               orderTransactionLpo.setId(lpoPK);
               orderTransactionLpo.setLpoNumber(orderTranHeader.getOrdTranLpo().getLpoNumber());
               orderTransactionLpo.setLpoDate(orderTranHeader.getOrdTranLpo().getLpoDate());
               orderTransactionLpo.setLpoSlipContent(orderTranHeader.getOrdTranLpo().getLpoSlipContent());
               orderTransactionLpo.setLpoSlipName(orderTranHeader.getOrdTranLpo().getLpoSlipName());
               orderTransactionLpo.setLpoSlipType(orderTranHeader.getOrdTranLpo().getLpoSlipType());
               oth.setOrdTranLpo(orderTransactionLpo);
            }
         }

         LOGGER.info("Feteched Reason Code" + oth.getReasonCodes().size());
         em.persist(oth);
         this.saveTenderLineItems(tlid);
         em.getTransaction().commit();
         result = "SUCCESS";
      } catch (Exception var24) {
         LOGGER.error(var24);
         System.err.println(var24);
      }

      return result;
   }

   public String getCustomerSiteId(String customerId) {
      String siteId = null;
      TypedQuery query = this.getEntityManager().createNamedQuery("CustomerSiteAddress.findByCustId", CustomerSiteAddress.class);

      try {
         query.setParameter("custId", customerId);
         List<CustomerSiteAddress> custSiteAddrList = query.getResultList();
         if (custSiteAddrList == null) {
            throw new Exception("No Customer Site Addresses were found for customer: " + customerId);
         }

         BigInteger siteIdBigInt = ((CustomerSiteAddress)custSiteAddrList.get(0)).getCustomerSiteAddressPK().getCustSiteId();
         siteId = String.valueOf(siteIdBigInt);
      } catch (Exception var6) {
         siteId = "";
         LOGGER.error(var6);
      }

      return siteId;
   }

   public String getCustomerSiteAddrss(String customerId, String custSiteId) {
      StringBuffer siteAddrss = new StringBuffer();
      TypedQuery query = this.getEntityManager().createNamedQuery("CustomerSiteAddress.findByCustId", CustomerSiteAddress.class);

      try {
         query.setParameter("custId", customerId);
         List<CustomerSiteAddress> custSiteAddrList = query.getResultList();
         Iterator var7 = custSiteAddrList.iterator();

         while(var7.hasNext()) {
            CustomerSiteAddress addrss = (CustomerSiteAddress)var7.next();
            if (addrss.getCustomerSiteAddressPK().getCustSiteId().toString().equalsIgnoreCase(custSiteId) && addrss.getTyAds() == '1') {
               if (addrss.getA1Cnct() != null) {
                  siteAddrss.append(addrss.getA1Cnct());
               }

               if (addrss.getA2Cnct() != null) {
                  siteAddrss.append(", ");
                  siteAddrss.append(addrss.getA2Cnct());
               }

               if (addrss.getCiCnct() != null) {
                  siteAddrss.append(", ");
                  siteAddrss.append(addrss.getCiCnct());
               }

               if (addrss.getCoCnct() != null) {
                  siteAddrss.append(", ");
                  siteAddrss.append(addrss.getCoCnct());
               }

               if (addrss.getPcCnct() != null) {
                  siteAddrss.append(", ");
                  siteAddrss.append(addrss.getPcCnct());
               }
            }
         }
      } catch (Exception var8) {
         LOGGER.error(var8);
      }

      return siteAddrss.toString();
   }

   private List<OrderTranLineItem> convertClaimLineItemtoOrder(List<ClaimTranLineItem> claimTranLineItemsList, OrderTranHeader oth) {
      List<OrderTranLineItem> ordTranLineItems = new ArrayList();
      int lineItemSeq = 1;
      Iterator var6 = claimTranLineItemsList.iterator();

      while(true) {
         ClaimTranLineItem claimTranLineItem;
         do {
            if (!var6.hasNext()) {
               return ordTranLineItems;
            }

            claimTranLineItem = (ClaimTranLineItem)var6.next();
         } while(claimTranLineItem.getWhReceiveQty().compareTo(new BigDecimal(0)) == 0);

         OrderTranLineItem otln = new OrderTranLineItem();
         OrderTranLineItemPK pk = new OrderTranLineItemPK();
         pk.setDcDyOrd(oth.getId().getDcDyOrd());
         pk.setRtStrId(oth.getId().getRtStrId());
         pk.setOrdWs(oth.getId().getOrdWs());
         pk.setTrnSeq(oth.getId().getTrnSeq());
         pk.setOrdLnItmSeq((long)lineItemSeq);
         otln.setId(pk);
         otln.setOrdTranHeader(oth);
         otln.setAiLnItmOrg(claimTranLineItem.getAiLnItmOrg());
         otln.setAiLnItmRltd(claimTranLineItem.getAiLnItmRltd());
         otln.setDcDyBsnOrg(claimTranLineItem.getDcDyBsnOrg());
         otln.setDeItmLcl(claimTranLineItem.getDeItmLcl());
         otln.setDeItmShrtRcpt(claimTranLineItem.getDeItmShrtRcpt());
         otln.setDkDptId(claimTranLineItem.getDkDptId());
         otln.setDkItmId(claimTranLineItem.getDkItmId());
         otln.setEdSz(claimTranLineItem.getEdSz());
         otln.setExtnDscLnItm(claimTranLineItem.getExtnDscLnItm());
         otln.setExtnLnItmRtn(claimTranLineItem.getExtnLnItmRtn());
         otln.setFeRstk(claimTranLineItem.getFeRstk());
         otln.setFlClrnc(claimTranLineItem.getFlClrnc());
         otln.setFlDscEmAlw(claimTranLineItem.getFlDscEmAlw());
         otln.setFlFeRstk(claimTranLineItem.getFlFeRstk());
         otln.setFlItmDsc(claimTranLineItem.getFlItmDsc());
         otln.setFlItmDscDmg(claimTranLineItem.getFlItmDscDmg());
         otln.setFlItmPrcAdj(claimTranLineItem.getFlItmPrcAdj());
         otln.setFlItmSzReq(claimTranLineItem.getFlItmSzReq());
         otln.setFlMdfrPrc(claimTranLineItem.getFlMdfrPrc());
         otln.setFlRfdSv(claimTranLineItem.getFlRfdSv());
         otln.setFlRltdItmRm(claimTranLineItem.getFlRltdItmRm());
         otln.setFlRltdItmRtn(claimTranLineItem.getFlRltdItmRtn());
         otln.setFlRtnMr(claimTranLineItem.getFlRtnMr());
         otln.setFlRtnPrh(claimTranLineItem.getFlRtnPrh());
         otln.setFlRtrvdTrn(claimTranLineItem.getFlRtrvdTrn());
         otln.setFlShpChg(claimTranLineItem.getFlShpChg());
         otln.setFlSlsAsscMdf(claimTranLineItem.getFlSlsAsscMdf());
         otln.setFlTx(claimTranLineItem.getFlTx());
         otln.setFlVdLnItm(claimTranLineItem.getFlVdLnItm());
         otln.setFlVldSrzItm(claimTranLineItem.getFlVldSrzItm());
         otln.setFlVldSrzItmExt(claimTranLineItem.getFlVldSrzItmExt());
         otln.setIdCln(claimTranLineItem.getIdCln());
         otln.setIdItmMfUpc(claimTranLineItem.getIdItmMfUpc());
         otln.setIdMrhrcGp(claimTranLineItem.getIdMrhrcGp());
         otln.setIdNmbSrz(claimTranLineItem.getIdNmbSrz());
         otln.setIdNonRtvdOrgRcpt(claimTranLineItem.getIdNonRtvdOrgRcpt());
         otln.setIdnSlsAgRst(claimTranLineItem.getIdnSlsAgRst());
         otln.setIdStrRtOrg(claimTranLineItem.getIdStrRtOrg());
         otln.setItemId(claimTranLineItem.getItemId());
         otln.setItmPrnPrc(claimTranLineItem.getItmPrnPrc());
         otln.setItmTy(claimTranLineItem.getItmTy());
         otln.setLineQnt(claimTranLineItem.getWhReceiveQty());
         otln.setLineQntRtn(claimTranLineItem.getWhReceiveQty());
         otln.setLuEntrRtPrc(claimTranLineItem.getLuEntrRtPrc());
         otln.setLuKtHdrRfnId(claimTranLineItem.getLuKtHdrRfnId());
         otln.setLuKtSt(claimTranLineItem.getLuKtSt());
         otln.setLuMthIdEnr(claimTranLineItem.getLuMthIdEnr());
         otln.setLuPrcAdjRfnId(claimTranLineItem.getLuPrcAdjRfnId());
         otln.setLuPrcRtDrvn(claimTranLineItem.getLuPrcRtDrvn());
         otln.setMrLvHrc(claimTranLineItem.getMrLvHrc());
         otln.setOrdIdTrnOrg(claimTranLineItem.getOrdIdTrnOrg());
         otln.setOrdLnItmSts(claimTranLineItem.getOrdLnItmSts());
         otln.setRcItmCndRtnMr(claimTranLineItem.getRcItmCndRtnMr());
         otln.setRcRfdSv(claimTranLineItem.getRcRfdSv());
         otln.setRcRtnMr(claimTranLineItem.getRcRtnMr());
         otln.setRcItmCndRtnMr(claimTranLineItem.getRcItmCndRtnMr());
         otln.setRegistryId(claimTranLineItem.getRegistryId());
         otln.setTaxIncLnItmRtn(claimTranLineItem.getTaxIncLnItmRtn());
         otln.setTsCrtRcrd(new Date());
         otln.setTsMdfRcrd(new Date());
         otln.setTxGpId(claimTranLineItem.getTxGpId());
         otln.setUomSls(claimTranLineItem.getUomSls());
         otln.setVatLnItmRtn(claimTranLineItem.getVatLnItmRtn());
         otln.setDispostionCode(claimTranLineItem.getDispostionCode());
         if (claimTranLineItem.getClaimTranDscItms() != null) {
            List<OrderTranDiscountItem> ordTranDiscItems = new ArrayList();
            int discItemSeq = 1;

            for(Iterator var12 = claimTranLineItem.getClaimTranDscItms().iterator(); var12.hasNext(); ++discItemSeq) {
               ClaimTranDscItm clDisc = (ClaimTranDscItm)var12.next();
               OrderTranDiscountItem ordDisc = new OrderTranDiscountItem();
               OrderTranDiscountItemPK ordDiscPk = new OrderTranDiscountItemPK();
               ordDiscPk.setDcDyOrd(claimTranLineItem.getId().getDcDyOrd());
               ordDiscPk.setOrdLnItmSeq((long)lineItemSeq);
               ordDiscPk.setOrdWs(claimTranLineItem.getId().getOrdWs());
               ordDiscPk.setRtStrId(claimTranLineItem.getId().getRtStrId());
               ordDiscPk.setTrnSeq(claimTranLineItem.getId().getTrnSeq());
               ordDiscPk.setDiscSeqNum((long)discItemSeq);
               ordDisc.setId(ordDiscPk);
               ordDisc.setDscAmt(clDisc.getDscAmt());
               ordDisc.setDscPer(clDisc.getDscPer());
               ordDisc.setOrdTranLineItem(otln);
               ordDisc.setPrmCmpDtlid(clDisc.getPrmCmpDtlid());
               ordDisc.setPrmCmpId(clDisc.getPrmCmpId());
               ordDisc.setPrmDesc(clDisc.getPrmDesc());
               ordDisc.setPrmId(clDisc.getPrmId());
               ordDisc.setPrmType(clDisc.getPrmType());
               ordDisc.setSrcTrgList(clDisc.getSrcTrgList());
               ordDisc.setTyDsc(clDisc.getTyDsc());
               ordDisc.setDiscReasonCode(clDisc.getDiscReasonCode());
               ordTranDiscItems.add(ordDisc);
            }

            otln.setOrdTranDscItms(ordTranDiscItems);
         }

         ordTranLineItems.add(otln);
         ++lineItemSeq;
      }
   }

   public OrderTranHeader createNewOrderForClaims(OrderTranHeader transaction) {
      LOGGER.info("creating new orderForClaims......");
      OrderTranHeaderPK headerPk = new OrderTranHeaderPK();
      String storeID = "";

      try {
         if (transaction.getCustomer().getCustomerHeader().getCustomerHeaderPK() != null) {
            CustomerHeader customerHeader = transaction.getCustomer().getCustomerHeader();
            storeID = this.lookupCustomer.getCustomerStoreID(customerHeader.getCustomerHeaderPK().getCustId());

            for(int i = 0; i < 1; ++i) {
               transaction.setSalesAgentsMap(this.loadSalesAgents(customerHeader.getEmId()));
            }
         }

         if (storeID.equalsIgnoreCase("")) {
            storeID = ConfigUtils.getInstance().getSDSStoreID();
         }
      } catch (Exception var10) {
         var10.printStackTrace();

         try {
            storeID = ConfigUtils.getInstance().getSDSStoreID();
         } catch (Exception var9) {
            var9.printStackTrace();
         }
      }

      headerPk.setRtStrId(storeID);
      SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
      String tranDate = format.format(new Date());
      headerPk.setDcDyOrd(tranDate);

      try {
         headerPk.setOrdWs(ConfigUtils.getInstance().getSDSWorkstationID());
      } catch (Exception var8) {
         LOGGER.error(var8);
      }

      transaction.setId(headerPk);
      transaction.setTsOrdBgn(new Date());
      OrderTranSum sum = new OrderTranSum();
      List<OrderTranSum> ordTranSums = new ArrayList();
      ordTranSums.add(sum);
      transaction.setOrdTranSum(sum);
      return transaction;
   }

   public LinkedHashMap<String, String> loadSalesAgents(String EmpIdAssociatedToCust) {
      LinkedHashMap salesAgentsMap = new LinkedHashMap();

      try {
         EmployeeSearchCriteriaIfc empsearchCriteria = new EmployeeSearchCriteria();
         empsearchCriteria.setEmployeeId("%");
         EmployeeIfc[] employees = this.lookUpEmployee.lookupSalesAgent(empsearchCriteria);
         if (employees != null && employees.length > 0) {
            int i;
            for(i = 0; i < employees.length; ++i) {
               if (employees[i].getEmployeeId().equalsIgnoreCase(EmpIdAssociatedToCust)) {
                  salesAgentsMap.put(employees[i].getEmployeeId(), employees[i].getEmployeeName() + " - " + employees[i].getEmployeeId());
                  break;
               }
            }

            for(i = 0; i < employees.length; ++i) {
               salesAgentsMap.put(employees[i].getEmployeeId(), employees[i].getEmployeeName() + " - " + employees[i].getEmployeeId());
            }
         }
      } catch (Exception var6) {
         var6.printStackTrace();
      }

      return salesAgentsMap;
   }

   private String getStatusOfClaim(BigDecimal scOrd) {
      String stat = null;
      if (scOrd.toString().equalsIgnoreCase("1")) {
         stat = "Registered";
      } else if (scOrd.toString().equalsIgnoreCase("5")) {
         stat = "Accepted";
      } else if (scOrd.toString().equalsIgnoreCase("6")) {
         stat = "Rejected";
      } else if (scOrd.toString().equalsIgnoreCase("2")) {
         stat = "Awaiting for approval";
      } else if (scOrd.toString().equalsIgnoreCase("3")) {
         stat = "Approved";
      } else if (scOrd.toString().equalsIgnoreCase("4")) {
         stat = "Approved";
      } else {
         stat = "none";
      }

      return stat;
   }

   public boolean markOrderAsDelivered(List<String> orders) throws Exception {
      EntityManager em = null;

      try {
         if (orders != null && !orders.isEmpty()) {
            new ArrayList();
            String deliveryComment = ((String)orders.get(0)).split("@")[((String)orders.get(0)).split("@").length - 1];
            if (deliveryComment == null) {
               deliveryComment = "";
            }

            em = this.getEntityManager();
            em.getTransaction().begin();
            List<OrderTranHeaderPK> pkid = this.getTranHeadPkList(orders);
            if (pkid != null) {
               Iterator var6 = pkid.iterator();

               while(var6.hasNext()) {
                  OrderTranHeaderPK wrap = (OrderTranHeaderPK)var6.next();
                  Query q = em.createNamedQuery("DELIVERED_ORDERS_HEADER_UPDATE").setParameter("p5", deliveryComment).setParameter("p2", wrap.getOrdWs()).setParameter("p3", wrap.getTrnSeq()).setParameter("p4", wrap.getDcDyOrd()).setParameter("param1", "24").setParameter("param2", 7).setParameter("p1", wrap.getRtStrId()).setParameter("para4", new Timestamp(Calendar.getInstance().getTimeInMillis()));
                  int result = q.executeUpdate();
                  LOGGER.info("records updated are " + result);
               }
            }
         }

         em.getTransaction().commit();
         LOGGER.info("commited all transactions......");
      } catch (Exception var12) {
         var12.printStackTrace();
         em.getTransaction().rollback();
      } finally {
         LOGGER.info("came out from  markOrderAsDelivered......");
         em.close();
      }

      return false;
   }

   public OrderTranHeaderPK getHeadId(Long seq, String s1, String s2, String s3) {
      OrderTranHeaderPK id = new OrderTranHeaderPK();
      id.setTrnSeq(seq);
      id.setRtStrId(s1);
      id.setOrdWs(s2);
      id.setDcDyOrd(s3);
      return id;
   }

   public List<OrderTranHeaderPK> getTranHeadPkList(List<String> order) {
      List<OrderTranHeaderPK> pkList = new ArrayList();
      if (order != null) {
         Iterator var4 = order.iterator();

         while(var4.hasNext()) {
            String wrap = (String)var4.next();
            String[] data = wrap.split("@");
            pkList.add(this.getHeadId(Long.parseLong(data[1]), data[2], data[3], data[4]));
         }
      }

      return pkList;
   }

   public List<OrderTranHeaderPK> getTranHeadPkForDelivered() throws Exception {
      EntityManager em = this.getEntityManager();
      List headp = null;

      try {
         headp = em.createNamedQuery("DELIVERED_ORDERS_HEADER_PK").setParameter("param1", "24").setParameter("param2", 7).getResultList();
      } catch (Exception var7) {
         var7.printStackTrace();
      } finally {
         LOGGER.info("came out of .getTranHeadPkForDelivered().....");
         em.close();
      }

      return headp;
   }

   public List<OrderDetail> getPendingOrders(EmployeeIfc emp) throws Exception {
      List<Integer> divIds = this.getEmpMrchAssc(emp);
      EntityManager em = this.getEntityManager();
      List<OrderDetail> orderList = null;
      StringBuilder pendingOrderQuery = new StringBuilder("select orderDetail from OrderDetail orderDetail where orderDetail.ordTy=23 and orderDetail.scOrd=0 and orderDetail.scTran=4 ");

      try {
         if (emp.getRoleAccess().equalsIgnoreCase("Within Division")) {
            pendingOrderQuery.append("and orderDetail.divisionId IN :divIds ORDER BY orderDetail.id.orderDate DESC");
            orderList = em.createQuery(pendingOrderQuery.toString()).setParameter("divIds", divIds).getResultList();
         } else if (emp.getRoleAccess().equalsIgnoreCase("Linked Agent")) {
            pendingOrderQuery.append("and orderDetail.empId = :empid ORDER BY orderDetail.id.orderDate DESC");
            orderList = em.createQuery(pendingOrderQuery.toString()).setParameter("empid", emp.getEmployeeId()).getResultList();
         } else if (emp.getRoleAccess().equalsIgnoreCase("All")) {
            orderList = em.createNamedQuery("PENDING_ORDER_GET").setParameter("param1", "23").setParameter("param2", 0).setParameter("param3", new BigDecimal(4)).getResultList();
         }
      } catch (Exception var10) {
         var10.printStackTrace();
      } finally {
         em.close();
      }

      return orderList != null && !orderList.isEmpty() ? orderList : null;
   }

   public boolean isQuoteOrder(OrderTranHeader head) {
      return head.getOrdTy().equalsIgnoreCase("23") && head.getScOrd().intValue() == 0 && head.getTransactionStatus().intValue() == 4;
   }

   public OrderTranHeader markAsSuspendRetrived(OrderTranHeader head) throws Exception {
      EntityManager em = null;
      OrderTranHeader changedHead = null;

      try {
         if (head != null && this.isQuoteOrder(head)) {
            em = this.getEntityManager();
            if (em != null) {
               em.getTransaction().begin();
               head.setOrdTy("23");
               head.setScOrd(new BigDecimal(0));
               head.setTransactionStatus(new BigDecimal(6));
               head.setTsOrdEnd(new Date());
               em.merge(head);
               em.getTransaction().commit();
               changedHead = this.createNewRecordsForSuspendAndRetriveTran(head);
               if (changedHead == null) {
                  return null;
               }

               return changedHead;
            }
         }

         return changedHead;
      } catch (Exception var8) {
         var8.printStackTrace();
         em.getTransaction().rollback();
      } finally {
         em.close();
      }

      return null;
   }

   private OrderTranHeader createNewRecordsForSuspendAndRetriveTran(OrderTranHeader suspendAndRetriveTra) {
      EntityManager em = null;
      Long seq = null;
      String businessDate = null;
      List<OrderTranLineItem> lineItems = null;
      OrderTranSum trnSum = null;

      try {
         em = this.getEntityManager();
         if (suspendAndRetriveTra == null) {
            return null;
         }

         trnSum = suspendAndRetriveTra.getOrdTranSum();
         String oldOrderId = trnSum.getIdOrd();
         seq = this.transactionService.getTranSeq(suspendAndRetriveTra.getId().getRtStrId());
         businessDate = this.getDateForOrderHead();
         if (seq != null) {
            em.getTransaction().begin();
            suspendAndRetriveTra.getId().setTrnSeq(seq);
            suspendAndRetriveTra.setTransactionStatus(new BigDecimal(4));
            suspendAndRetriveTra.getId().setDcDyOrd(businessDate);
            lineItems = suspendAndRetriveTra.getOrdTranLineItems();
            if (lineItems != null && lineItems.size() > 0) {
               Iterator var9 = lineItems.iterator();

               while(var9.hasNext()) {
                  OrderTranLineItem item = (OrderTranLineItem)var9.next();
                  item.getId().setTrnSeq(seq);
                  item.getId().setDcDyOrd(businessDate);
               }

               suspendAndRetriveTra.setOrdTranLineItems(lineItems);
            }

            if (suspendAndRetriveTra.getOrdTranLpo() != null) {
               suspendAndRetriveTra.getOrdTranLpo().getId().setTrnSeq(seq);
               suspendAndRetriveTra.getOrdTranLpo().getId().setDcDyOrd(businessDate);
            }

            trnSum.getId().setTrnSeq(seq);
            trnSum.getId().setDcDyOrd(businessDate);
            trnSum.setIdOrd(oldOrderId);
            trnSum.setOrdDlvrDate(suspendAndRetriveTra.getOrdTranSum().getOrdDlvrDate());
            trnSum.setOrdDlvrTimePeriod(suspendAndRetriveTra.getOrdTranSum().getOrdDlvrTimePeriod());
            trnSum.setOrdEfDate(suspendAndRetriveTra.getOrdTranSum().getOrdEfDate());
            trnSum.setOrdLvlDvr(suspendAndRetriveTra.getOrdTranSum().getOrdLvlDvr());
            suspendAndRetriveTra.setOrdTranSum(trnSum);
            em.persist(suspendAndRetriveTra);
            em.getTransaction().commit();
         }

         return suspendAndRetriveTra;
      } catch (Exception var13) {
         var13.printStackTrace();
         em.getTransaction().rollback();
      } finally {
         em.close();
      }

      return null;
   }

   private String getDateForOrderHead() {
      SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
      return format.format(new Date());
   }

   public LinkedHashMap<String, String> validateInventory(OrderTranHeader head) throws Exception {
      LinkedHashMap<String, String> result = new LinkedHashMap();
      new String();
      new String();
      LinkedHashMap<String, BigDecimal> itemQtyMap = new LinkedHashMap();
      if (head != null) {
         String chanelId = ConfigUtils.getInstance().getWarehouseChannelID();
         String whId = ConfigUtils.getInstance().getWarehouseLocationID();
         Iterator var7 = head.getOrdTranLineItems().iterator();

         while(var7.hasNext()) {
            OrderTranLineItem line = (OrderTranLineItem)var7.next();
            if (line.getItmTy().compareTo(new BigDecimal(2)) != 0) {
               if (itemQtyMap.containsKey(line.getItemId())) {
                  itemQtyMap.put(line.getItemId(), line.getLineQnt().add((BigDecimal)itemQtyMap.get(line.getItemId())));
               } else {
                  itemQtyMap.put(line.getItemId(), line.getLineQnt());
               }
            }
         }

         if (itemQtyMap.size() > 0) {
            result = this.getItemQty(itemQtyMap, whId, chanelId);
         }
      }

      return result;
   }

   private LinkedHashMap<String, String> getItemQty(LinkedHashMap<String, BigDecimal> itemap, String whid, String chid) {
      RMSInventoryDetailService webCall = null;
      LinkedHashMap<String, String> result = new LinkedHashMap();
      BigDecimal qun = null;

      try {
         webCall = new RMSInventoryDetailService();
         if (itemap != null && itemap.size() > 0) {
            Set<String> keys = itemap.keySet();
            Iterator var9 = keys.iterator();

            while(var9.hasNext()) {
               String item = (String)var9.next();
               qun = webCall.lookupInventory(item);
               if (qun != null) {
                  if (((BigDecimal)itemap.get(item)).compareTo(qun) == 1) {
                     result.put(item, qun.toString() + "#" + itemap.get(item));
                  }
               } else {
                  result.put(item, (new BigDecimal("0")).toString() + "#" + itemap.get(item));
               }
            }
         }
      } catch (Exception var10) {
         var10.printStackTrace();
      }

      return result;
   }

   public Hashtable<String, Object> cancelSalesOrder(String orderId, String transComment, String empId, String reasonCode) {
      Hashtable<String, Object> result = new Hashtable();
      List<OrderTranSum> otmList = this.getOrderTransactionSum(orderId);
      if (otmList.size() == 1) {
         if (!this.isOrderShipped(orderId)) {
            OrderTranHeader oth = ((OrderTranSum)otmList.get(0)).getOrdTranHeader();
            oth.setTransComment(transComment);
            oth.setReturnReasonCode(reasonCode);
            if (oth.getOrdTy().equalsIgnoreCase("23")) {
               try {
                  OrderTranHeader cancledOth = this.saveCancelOrder(oth, empId, result);
                  cancledOth.setOrdTranLpo(oth.getOrdTranLpo());
                  result.put("OrderTranHeader", cancledOth);
               } catch (Exception var9) {
                  result.put("ERROR", "COULD_NOT_PERSIT");
               }
            }
         } else {
            result.put("ERROR", "ITEM_SHIPPED_FROM_WMS");
         }
      } else {
         result.put("ERROR", otmList.size() + " ORDER_FOUND");
      }

      return result;
   }

   private OrderTranHeader saveCancelOrder(OrderTranHeader oth, String empId, Hashtable<String, Object> result) {
      boolean status = false;
      result.put("PERSIST", status);
      String custId = oth.getOrdTranSum().getOrdIdCt();
      OrderTranHeader cancelTranHeader = null;

      try {
         cancelTranHeader = this.transactionService.getNewTransaction(custId, "25", empId);
         OrderTranSumPK cancelTranHeaderPk = cancelTranHeader.getOrdTranSum().getId();
         cancelTranHeader.setTransactionStatus(new BigDecimal("2"));
         cancelTranHeader.setScOrd(new BigDecimal(8));
         cancelTranHeader.setDeliveryComment(oth.getTransComment());
         cancelTranHeader.setCtDvrInf(oth.getCtDvrInf());
         cancelTranHeader.setReturnReasonCode(oth.getReturnReasonCode());
         cancelTranHeader.setEmId(oth.getEmId());
         cancelTranHeader.setIdOpr(empId);
         SDSEntityBuilder.cloneOrderTranSum(oth.getOrdTranSum(), cancelTranHeader.getOrdTranSum());
         List<OrderTranLineItem> orderLineItems = new ArrayList();

         OrderTranLineItem lineItem;
         for(Iterator var10 = oth.getOrdTranLineItems().iterator(); var10.hasNext(); orderLineItems.add(lineItem)) {
            OrderTranLineItem ltm = (OrderTranLineItem)var10.next();
            lineItem = (OrderTranLineItem)SerializationUtils.clone(ltm);
            lineItem.setOrdIdTrnOrg(lineItem.getId().getDcDyOrd());
            lineItem.setDcDyBsnOrg(lineItem.getId().getDcDyOrd());
            lineItem.setIdStrRtOrg(lineItem.getId().getRtStrId());
            lineItem.setAiLnItmOrg(new BigDecimal(lineItem.getId().getOrdLnItmSeq()));
            lineItem.getId().setDcDyOrd(cancelTranHeaderPk.getDcDyOrd());
            lineItem.getId().setOrdWs(cancelTranHeaderPk.getOrdWs());
            lineItem.getId().setRtStrId(cancelTranHeaderPk.getRtStrId());
            lineItem.getId().setTrnSeq(cancelTranHeaderPk.getTrnSeq());
            lineItem.setOrdTranHeader(cancelTranHeader);
            List<OrderTranDiscountItem> discountItems = lineItem.getOrdTranDscItms();
            if (discountItems != null && discountItems.size() > 0) {
               lineItem.setFlItmDsc("0");
            } else {
               lineItem.setFlItmDsc("1");
            }

            int disLineSeq = 1;
            if (discountItems != null) {
               for(Iterator var15 = discountItems.iterator(); var15.hasNext(); ++disLineSeq) {
                  OrderTranDiscountItem discountItem = (OrderTranDiscountItem)var15.next();
                  OrderTranDiscountItemPK orderTranDiscountItemPK = new OrderTranDiscountItemPK();
                  orderTranDiscountItemPK.setDiscSeqNum((long)disLineSeq);
                  orderTranDiscountItemPK.setDcDyOrd(cancelTranHeaderPk.getDcDyOrd());
                  orderTranDiscountItemPK.setOrdWs(cancelTranHeaderPk.getOrdWs());
                  orderTranDiscountItemPK.setRtStrId(cancelTranHeaderPk.getRtStrId());
                  orderTranDiscountItemPK.setTrnSeq(cancelTranHeaderPk.getTrnSeq());
                  orderTranDiscountItemPK.setOrdLnItmSeq(lineItem.getId().getOrdLnItmSeq());
                  discountItem.setId(orderTranDiscountItemPK);
                  discountItem.setOrdTranLineItem(lineItem);
               }

               lineItem.setOrdTranDscItms(discountItems);
            }
         }

         cancelTranHeader.setOrdTranLineItems(orderLineItems);
         cancelTranHeader.setTsOrdEnd(new Date());
         status = this.transactionService.saveTransaction(cancelTranHeader);
         if (oth.getOrdTy().equalsIgnoreCase("23")) {
            TranLineItemTender tenderLineItem = new TranLineItemTender();
            TranLineItemTenderPK tenderLineItempk = new TranLineItemTenderPK();
            tenderLineItempk.setRtStrId(cancelTranHeader.getId().getRtStrId());
            tenderLineItempk.setOrdWs(cancelTranHeader.getId().getOrdWs());
            tenderLineItempk.setTrnSeq(cancelTranHeader.getId().getTrnSeq());
            tenderLineItempk.setTrnLnItmSeq(Long.parseLong("1"));
            tenderLineItempk.setDcDyOrd(cancelTranHeader.getId().getDcDyOrd());
            tenderLineItem.setId(tenderLineItempk);
            tenderLineItem.setMoItmLnTnd(cancelTranHeader.getOrdTranSum().getDkartNetTot());
            tenderLineItem.setTyTnd("CARD");
            tenderLineItem.setIdOrd("HOUSE");
            tenderLineItem.setIdAcntNmb(cancelTranHeader.getOrdTranSum().getOrdIdCt());
            tenderLineItem.setDkTsCrtRcrd(new Date());
            this.saveTenderLineItems(tenderLineItem);
         }

         result.put("PERSIST", status);
      } catch (Exception var17) {
         System.err.println(var17);
         LOGGER.error(var17);
         var17.printStackTrace();
      }

      return cancelTranHeader;
   }

   public boolean isOrderShipped(String idOrd) {
      boolean result = false;
      EntityManager em = this.emf.createEntityManager();
      List<OrderShipmentDetail> orderDetail = em.createNamedQuery("SHIPMENT_DETAILS_BY_ORDERID", OrderShipmentDetail.class).setParameter("orderId", idOrd).getResultList();
      if (orderDetail.size() > 0) {
         result = true;
      }

      return result;
   }

   public OrderTranHeader getOrderByOrderID(String orderID, String orderType, BigDecimal orderstatus, BigDecimal tranStatus) {
      OrderTranHeader orderTranHeader = null;
      Query query = this.getEntityManager().createNamedQuery("GET_ORDER_BY_ORDER_ID", OrderTranHeader.class);
      query.setParameter("idOrd", orderID).setParameter("ordTy", orderType).setParameter("scOrd", orderstatus).setParameter("transactionStatus", tranStatus);

      try {
         orderTranHeader = (OrderTranHeader)query.getSingleResult();
         CustomerSearchCriteria customerSearchCriteria = new CustomerSearchCriteria();
         customerSearchCriteria.setCustomerId(orderTranHeader.getOrdTranSum().getOrdIdCt());
         CustomerIfc[] customers = this.lookupCustomer.lookUpCust(customerSearchCriteria);
         orderTranHeader.setCustomer(customers[0]);
         orderTranHeader.setReasonCodes(this.getAllReasonCodes());
         List<OrderTranLineItem> lineItmsList = orderTranHeader.getOrdTranLineItems();
         Iterator<OrderTranLineItem> itr = lineItmsList.iterator();
         SearchCriteria itemCriteria = new SearchCriteria();
         itemCriteria.setStoreID(orderTranHeader.getId().getRtStrId());
         itemCriteria.setCheckInventory(true);

         while(itr.hasNext()) {
            OrderTranLineItem ordLineitm = (OrderTranLineItem)itr.next();
            itemCriteria.setItemIdOrUPC(ordLineitm.getItemId());
            ordLineitm.setPluItem(this.lookupItem.lookUpItemById(itemCriteria));
         }

         return orderTranHeader;
      } catch (Exception var13) {
         LOGGER.error("Error ocuured while fetching the OrderTranHeader from the database for the Order ID:  " + orderID);
         return orderTranHeader;
      }
   }

   public String getSalesAgentMailId(String ordId) {
      String Email = null;

      try {
         EntityManager em = this.getEntityManager();
         Query query = em.createNamedQuery("GET_SALESAGENT_MAILID").setParameter("1", ordId);
         Email = (String)query.getSingleResult();
      } catch (Exception var5) {
         var5.printStackTrace();
      }

      return Email;
   }

   public String getDataEntryOptrMailId(String ordId) {
      String Email = null;

      try {
         EntityManager em = this.getEntityManager();
         Query query = em.createNamedQuery("GET_DATAENTRYOP_MAILID").setParameter("1", ordId);
         Email = (String)query.getSingleResult();
      } catch (Exception var5) {
         var5.printStackTrace();
      }

      return Email;
   }

   public String[] getDepartmentHeadMailId(String ordId) {
      String[] Email = null;
      new ArrayList();

      try {
         EntityManager em = this.getEntityManager();
         Query query = em.createNamedQuery("GET_DepartmentHead_MAILID").setParameter("1", ordId);
         List<String> emailsList = query.getResultList();
         emailsList.removeIf(Objects::isNull);
         Email = new String[emailsList.size()];
         Email = (String[])emailsList.toArray(Email);
      } catch (Exception var6) {
         var6.printStackTrace();
      }

      return Email;
   }

   public List<OrderTranLineItem> getDeliveredQty(String ordId) {
      List DeliveredQty = null;

      try {
         EntityManager em = this.getEntityManager();
         Query query = em.createNamedQuery("GET_LINE_QNT").setParameter("ordId", ordId);
         DeliveredQty = query.getResultList();
      } catch (Exception var5) {
         var5.printStackTrace();
      }

      return DeliveredQty;
   }

   public List<Integer> getEmpMrchAssc(EmployeeIfc employee) {
      List<EmpMerchAssociationIfc> empMrchAss = employee.getMerchAssoc();
      List<Integer> divIds = new ArrayList();
      if (empMrchAss != null) {
         Iterator var5 = empMrchAss.iterator();

         while(var5.hasNext()) {
            EmpMerchAssociationIfc empMrchAsc = (EmpMerchAssociationIfc)var5.next();
            if (empMrchAsc.getMerchId().startsWith("1:")) {
               int merchId = Integer.parseInt(empMrchAsc.getMerchId().split("1:")[1]);
               divIds.add(merchId);
            }
         }
      }

      return divIds;
   }

   public List<ClaimDetailTable> getRjectedClaimOrderDetails(String Status, String empRoleAcc, String emplName, List<Integer> divIds, String emplID, String orderID, Date parsed_from, Date parsed_to, String ordertotalfrom, String ordertotalto) {
      ArrayList<String> claimIdList = new ArrayList();
      Vector<ClaimDetailTable> claimDetailTableList = new Vector();
      List<ClaimTranHeader> claimTranHeaderList = new ArrayList();
      List<RisplDkEmpMstr> RisplDkEmpMstrList = new ArrayList();
      OrderTransactionUtility util = new OrderTransactionUtility();
      EntityManager em = this.getEntityManager();
      Query query = null;
      Query SalesQuery = null;
      query = util.getClaimQueryByClaimOrderDetails(divIds, empRoleAcc, emplID, orderID, parsed_from, parsed_to, ordertotalfrom, ordertotalto, em);
      if (query != null) {
         try {
            claimTranHeaderList = query.getResultList();
         } catch (Exception var33) {
            System.out.println(var33);
         }
      }

      Iterator var20 = ((List)claimTranHeaderList).iterator();

      while(var20.hasNext()) {
         ClaimTranHeader claimTranHeade = (ClaimTranHeader)var20.next();
         ClaimDetailTable cdt = new ClaimDetailTable();
         SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

         try {
            cdt.setClaimDate(dateFormat.parse(claimTranHeade.getId().getDcDyOrd()));
         } catch (ParseException var32) {
            var32.printStackTrace();
         }

         try {
            cdt.setClaimTotal(claimTranHeade.getClaimTranSum().getDkartNetTot());
         } catch (Exception var31) {
            System.err.println(var31);
         }

         cdt.setClaimId(claimTranHeade.getClaimId());
         BigDecimal lineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getLineQntRtn() == null ? BigDecimal.ZERO : line.getLineQntRtn();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         BigDecimal ApprvedlineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getApprClaimQty() == null ? BigDecimal.ZERO : line.getApprClaimQty();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         BigDecimal WhreceivedlineQntRtn = (BigDecimal)claimTranHeade.getClaimTranLineItems().stream().map((line) -> {
            return line.getWhReceiveQty() == null ? BigDecimal.ZERO : line.getWhReceiveQty();
         }).reduce(BigDecimal.ZERO, BigDecimal::add);
         if (claimTranHeade.getScOrd().toString().equalsIgnoreCase("1")) {
            cdt.setQty(lineQntRtn.toString());
         } else if (!claimTranHeade.getScOrd().toString().equalsIgnoreCase("2") && !claimTranHeade.getScOrd().toString().equalsIgnoreCase("3") && !claimTranHeade.getScOrd().toString().equalsIgnoreCase("4")) {
            if (claimTranHeade.getScOrd().toString().equalsIgnoreCase("5")) {
               cdt.setQty(WhreceivedlineQntRtn.toString());
            } else {
               cdt.setQty(lineQntRtn.toString());
            }
         } else {
            cdt.setQty(ApprvedlineQntRtn.toString());
         }

         cdt.setStatus(this.getStatusOfClaim(claimTranHeade.getScOrd()));
         Map<String, String> o = (Map)this.getAllReasonCodes().get("Returns");
         cdt.setReasonCode((String)o.get(claimTranHeade.getRcRtnMr()));
         cdt.setSalesAgent(claimTranHeade.getEmId());

         String salesAgnetName;
         try {
            salesAgnetName = claimTranHeade.getClaimTranSum().getOrdIdCt();
            cdt.setCustomerId(salesAgnetName);
            Query customerQ = em.createNamedQuery("CUSTOMER_LOOKUP_CUSTOMER_BY_ID", CustomerHeader.class).setParameter("customerId", salesAgnetName);
            CustomerHeader header = (CustomerHeader)customerQ.getSingleResult();
            cdt.setCustomerName(header.getCtNm());
         } catch (Exception var30) {
            LOGGER.error(var30);
         }

         salesAgnetName = cdt.getSalesAgent();
         SalesQuery = util.getClaimSalesAgentNames(divIds, empRoleAcc, emplID, salesAgnetName, em);

         try {
            if (SalesQuery != null) {
               RisplDkEmpMstrList = SalesQuery.getResultList();
            } else {
               System.out.println("Query is empty: " + SalesQuery);
            }

            Iterator var36 = ((List)RisplDkEmpMstrList).iterator();

            while(var36.hasNext()) {
               RisplDkEmpMstr RisplDkEmpMstr = (RisplDkEmpMstr)var36.next();
               cdt.setSalesAgent(RisplDkEmpMstr.getEmpNme());
            }
         } catch (Exception var34) {
            var34.printStackTrace();
            System.out.println(var34);
         }

         if (!claimIdList.contains(cdt.getClaimId())) {
            claimDetailTableList.add(cdt);
            claimIdList.add(cdt.getClaimId());
         }
      }

      return claimDetailTableList;
   }

   public Map<String, StringBuffer> getItemSerialNumbers(OrderTranHeader oth) {
      EntityManager em = null;
      Query query = null;
      List<OrdInvShpQtySrlno> serialNoList = null;
      Map<String, StringBuffer> slnoMap = new HashMap();
      StringBuffer sb = null;

      try {
         em = this.getEntityManager();
         query = em.createNamedQuery("SEARCH_SERIAL_NO");
         query.setParameter("ordId", oth.getOrdTranSum().getIdOrd());
         serialNoList = query.getResultList();
         Iterator var8 = serialNoList.iterator();

         while(var8.hasNext()) {
            OrdInvShpQtySrlno slno = (OrdInvShpQtySrlno)var8.next();
            if (slnoMap.containsKey(slno.getId().getItemId())) {
               sb = (StringBuffer)slnoMap.get(slno.getId().getItemId());
               sb = sb.append("," + slno.getId().getSerialNo());
               slnoMap.put(slno.getId().getItemId(), sb);
            } else {
               slnoMap.put(slno.getId().getItemId(), new StringBuffer(slno.getId().getSerialNo()));
            }
         }

         return slnoMap;
      } catch (Exception var9) {
         LOGGER.error("Error while fetching serial numers");
         return slnoMap;
      }
   }

   public boolean isPartialShippingAvailable(String orderId) {
      if (orderId != null) {
         boolean atleastOneItemShipped = false;
         boolean areItemsPicked = false;
         boolean isOrderInProgress = false;
         boolean allItemsShipped = false;
         orderId = orderId.trim();
         Map itemsNotShipped = null;
         Map<String, List<String>> itemsShipped = null;
         Map<String, Long> itemsPicked = null;
         Map<String, Map> shippingDetailsMap = this.getShippingDetails(orderId);
         if (!shippingDetailsMap.isEmpty()) {
            itemsShipped = (Map)shippingDetailsMap.get("itemsShipped");
            itemsNotShipped = (Map)shippingDetailsMap.get("itemsNotShipped");
         }

         if (itemsShipped != null && itemsShipped.size() > 0) {
            atleastOneItemShipped = itemsShipped.entrySet().stream().filter((i) -> {
               return (new BigDecimal((String)((List)i.getValue()).get(2))).compareTo(BigDecimal.ZERO) > 0;
            }).findFirst().isPresent();
         }

         LOGGER.info("Is atleast one item shipped: " + atleastOneItemShipped);
         List<Object> pickedItemsQty = this.getPickedQty(orderId);
         if (pickedItemsQty != null && pickedItemsQty.size() > 0) {
            itemsPicked = (Map)pickedItemsQty.stream().collect(Collectors.toMap((item) -> {
               return ((Object[])item)[1].toString();
            }, (item) -> {
               return Long.valueOf(((Object[])item)[2].toString());
            }));
         }

         areItemsPicked = itemsPicked != null ? itemsPicked.values().stream().filter((pickedQty) -> {
            return pickedQty > 0L;
         }).findFirst().isPresent() : false;
         LOGGER.info("Are any items picked: " + areItemsPicked);
         EntityManager em = this.emf.createEntityManager();
         TypedQuery<OrderTranHeader> orderPartialQuery = em.createNamedQuery("INVOICE_DETAILS_ORDERID_TYPE", OrderTranHeader.class).setParameter("orderId", orderId).setParameter("ordTyp", "26").setParameter("scOrd", new BigDecimal(4)).setParameter("tranStatus", new BigDecimal(2));
         List<OrderTranHeader> orderPartialRecords = orderPartialQuery.getResultList();
         if (orderPartialRecords != null && orderPartialRecords.size() > 0) {
            LOGGER.info("Do order partial records already exist: true");
            return false;
         }

         LOGGER.info("Do order partial records already exist: false");
         OrderTransactionSearchCriteriaIfc search = new OrderTransactionSearchCriteria();
         search.setMaximumResults(5);
         search.setSearchByinvoiceNumberOrOrderNumber(true);
         search.setInvoiceNumberOrOrderNumber(orderId);
         OrderTranHeader[] orders = this.getTransactionsInvoices(search);
         OrderTranHeader ord_tran_header = orders != null && orders.length > 0 ? orders[0] : null;
         if (ord_tran_header != null && ord_tran_header.getOrdTy().equalsIgnoreCase("23") && ord_tran_header.getTransactionStatus().compareTo(new BigDecimal(2)) == 0 && ord_tran_header.getScOrd().compareTo(new BigDecimal(2)) >= 0 && ord_tran_header.getScOrd().compareTo(new BigDecimal(3)) <= 0) {
            isOrderInProgress = true;
         }

         LOGGER.info("For Order Id: " + orderId + ", In-Progress status: " + isOrderInProgress);
         Predicate<Entry> orderQtyGreaterThanShippedQty = (i) -> {
            return (new BigDecimal((String)((List)i.getValue()).get(1))).compareTo(new BigDecimal((String)((List)i.getValue()).get(2))) > 0;
         };
         if (itemsShipped != null && itemsNotShipped.size() == 0) {
            allItemsShipped = true;
         }

         LOGGER.info("For Order Id: " + orderId + ", All items shipped: " + allItemsShipped);
         if (isOrderInProgress && atleastOneItemShipped && !areItemsPicked && !allItemsShipped) {
            LOGGER.debug("For Order Id: " + orderId + " partial shipping available: true");
            return true;
         }
      }

      LOGGER.debug("For Order Id: " + orderId + " partial shipping available: false");
      return false;
   }

   public boolean inProgressOrder(String orderId) {
      if (orderId == null) {
         LOGGER.debug("For Order Id: " + orderId + " not able to open IN WMS: false");
         return false;
      } else {
         boolean isOrderInProgress = false;
         orderId = orderId.trim();
         EntityManager em = this.emf.createEntityManager();
         OrderTransactionSearchCriteriaIfc search = new OrderTransactionSearchCriteria();
         search.setMaximumResults(5);
         search.setSearchByinvoiceNumberOrOrderNumber(true);
         search.setInvoiceNumberOrOrderNumber(orderId);
         OrderTranHeader[] orders = this.getTransactionsInvoices(search);
         OrderTranHeader ord_tran_header = orders != null && orders.length > 0 ? orders[0] : null;
         if (ord_tran_header != null && ord_tran_header.getOrdTy().equalsIgnoreCase("23") && ord_tran_header.getTransactionStatus().compareTo(new BigDecimal(2)) == 0 && ord_tran_header.getScOrd().compareTo(new BigDecimal(2)) >= 0 && ord_tran_header.getScOrd().compareTo(new BigDecimal(3)) <= 0) {
            try {
               em.getTransaction().begin();
               String sqlQry = "update ORD_TRAN_HEADER header set sc_ord='1' where (header.TRN_SEQ,header.DC_DY_ORD,header.ORD_WS,header.RT_STR_ID)=(SELECT MAX(T1.TRN_SEQ), T1.DC_DY_ORD,T1.ORD_WS,\t T1.RT_STR_ID\t FROM ord_tran_sum T2,\t ORD_TRAN_HEADER T1 WHERE T1.RT_STR_ID = T2.RT_STR_ID  AND T1.ORD_WS  = T2.ORD_WS\tAND T1.TRN_SEQ  = T2.TRN_SEQ AND T1.DC_DY_ORD = T2.DC_DY_ORD AND T2.id_Ord ='" + orderId + "' group by " + "T1.RT_STR_ID,T1.DC_DY_ORD,T1.ORD_WS)";
               LOGGER.info("trying to update the ORD_TRN_head TABLE table for the In progress orders.... ");
               Query qe = em.createNativeQuery(sqlQry);
               int countUpdated = qe.executeUpdate();
               em.getTransaction().commit();
               LOGGER.info("updated the ORD_TRN_Head TABLE table for the In progress orders.... " + countUpdated);
            } catch (Exception var10) {
               LOGGER.error(var10.getMessage(), var10.getCause());
            }

            isOrderInProgress = true;
         }

         LOGGER.info("For Order Id: " + orderId + ", In-Progress status: " + isOrderInProgress);
         return true;
      }
   }

   public Map<String, Map> getShippingDetails(String orderId) {
      Map<String, Map> shippingDetailMap = new LinkedHashMap();
      if (orderId != null) {
         orderId = orderId.trim();
         Map<String, List<String>> itemsShipped = new LinkedHashMap();
         Map<String, List<String>> itemsNotShipped = new LinkedHashMap();
         OrderTransactionSearchCriteriaIfc search = new OrderTransactionSearchCriteria();
         search.setMaximumResults(5);
         search.setSearchByinvoiceNumberOrOrderNumber(true);
         search.setInvoiceNumberOrOrderNumber(orderId);
         OrderTranHeader[] orders = this.getTransactionsInvoices(search);
         OrderTranHeader ord_tran_header = orders != null && orders.length > 0 ? orders[0] : null;
         List<Object> shippedItemsQty = this.getShippedQty(orderId);
         if (shippedItemsQty != null && shippedItemsQty.size() > 0 && ord_tran_header != null) {
            Iterator var11 = shippedItemsQty.iterator();

            String itemId;
            ArrayList shippedItemDetail;
            while(var11.hasNext()) {
               Object shippedItem = var11.next();
               List<OrderTranLineItem> shippedLineItems = (List)ord_tran_header.getOrdTranLineItems().stream().filter((line) -> {
                  return line.getItemId().equalsIgnoreCase(((Object[])shippedItem)[1].toString());
               }).collect(Collectors.toList());
               BigDecimal lineQty = (BigDecimal)shippedLineItems.stream().map((line) -> {
                  return line.getLineQnt();
               }).reduce(BigDecimal.ZERO, BigDecimal::add);
               shippedItemDetail = new ArrayList();
               itemId = ((Object[])shippedItem)[1].toString();
               if (lineQty.compareTo(BigDecimal.ZERO) > 0) {
                  shippedItemDetail.add(((OrderTranLineItem)shippedLineItems.get(0)).getDeItmShrtRcpt());
                  shippedItemDetail.add(lineQty.toString());
                  shippedItemDetail.add(((Object[])shippedItem)[2].toString());
                  itemsShipped.put(itemId, shippedItemDetail);
               }

               if (lineQty.compareTo(new BigDecimal(((Object[])shippedItem)[2].toString())) > 0) {
                  List<String> partiallyShippedDetails = new ArrayList();
                  partiallyShippedDetails.add((String)shippedItemDetail.get(0));
                  partiallyShippedDetails.add((String)shippedItemDetail.get(1));
                  partiallyShippedDetails.add(lineQty.subtract(new BigDecimal(((Object[])shippedItem)[2].toString())).toString());
                  itemsNotShipped.put(itemId, partiallyShippedDetails);
               }
            }

            Set<String> shippedItems = (Set)shippedItemsQty.stream().map((s) -> {
               return ((Object[])s)[1].toString();
            }).collect(Collectors.toSet());
            List<OrderTranLineItem> notShippedLineItems = (List)ord_tran_header.getOrdTranLineItems().stream().filter((line) -> {
               return !shippedItems.contains(line.getItemId());
            }).collect(Collectors.toList());
            Iterator var19 = notShippedLineItems.iterator();

            while(var19.hasNext()) {
               OrderTranLineItem notShippedLineItem = (OrderTranLineItem)var19.next();
               shippedItemDetail = new ArrayList();
               itemId = notShippedLineItem.getItemId();
               shippedItemDetail.add(notShippedLineItem.getDeItmShrtRcpt());
               shippedItemDetail.add(notShippedLineItem.getLineQnt().toString());
               shippedItemDetail.add(notShippedLineItem.getLineQnt().toString());
               itemsNotShipped.put(itemId, shippedItemDetail);
            }

            shippingDetailMap.put("itemsShipped", itemsShipped);
            shippingDetailMap.put("itemsNotShipped", itemsNotShipped);
            LOGGER.debug("For Order Id: " + orderId + " Items shipped are: \n\t" + itemsShipped);
            LOGGER.debug("For Order Id: " + orderId + " Items not shipped are: \n\t" + itemsNotShipped);
         }
      }

      return shippingDetailMap;
   }

   public Map<String, OrderTranHeader> processPartialShipping(String orderId, String partialShippingReasonCode, String employeeId) {
      Map<String, OrderTranHeader> processedOrder = new LinkedHashMap();
      if (orderId != null && partialShippingReasonCode != null) {
         orderId = orderId.trim();
         OrderTransactionSearchCriteriaIfc search = new OrderTransactionSearchCriteria();
         search.setMaximumResults(5);
         search.setSearchByinvoiceNumberOrOrderNumber(true);
         search.setInvoiceNumberOrOrderNumber(orderId);
         OrderTranHeader[] orders = this.getTransactionsInvoices(search);
         OrderTranHeader orderInit = orders != null && orders.length > 0 ? orders[0] : null;
         processedOrder.put("orderInit", orderInit);
         Map<String, List<String>> itemsShipped = null;
         Map<String, Map> shippingDetailsMap = this.getShippingDetails(orderId);
         if (shippingDetailsMap != null && !shippingDetailsMap.isEmpty() && shippingDetailsMap.containsKey("itemsShipped")) {
            itemsShipped = (Map)shippingDetailsMap.get("itemsShipped");
         }

         Map<String, String> orgSeqItmIdMap = new HashMap();
         Iterator var12 = orderInit.getOrdTranLineItems().iterator();

         while(var12.hasNext()) {
            OrderTranLineItem orderTranLineItem = (OrderTranLineItem)var12.next();
            orgSeqItmIdMap.put(String.valueOf(orderTranLineItem.getId().getOrdLnItmSeq()), orderTranLineItem.getItemId());
         }

         List<OrderTranLineItem> orderPartialSplitLineItems = new ArrayList();
         List<OrderTranLineItem> orderPartialGroupedLineItems = new ArrayList();
         OrderTranHeader orderPartial = null;
         orderPartial = (OrderTranHeader)SerializationUtils.clone(orderInit);
         List orderInitTempLineItems = orderPartial.getOrdTranLineItems();

         try {
            orderInitTempLineItems = this.promoService.splitTranLineItems(orderInitTempLineItems);
         } catch (Exception var27) {
            LOGGER.error(var27.getMessage(), var27.getCause());
         }

         Iterator var16 = itemsShipped.keySet().iterator();

         List orderCancelGroupedLineItems;
         while(var16.hasNext()) {
            String itemId = (String)var16.next();
            long shippedQty = Long.parseLong((String)((List)itemsShipped.get(itemId)).get(2));
            orderCancelGroupedLineItems = (List)orderInitTempLineItems.stream().filter((item) -> {
               return item.getItemId().equalsIgnoreCase(itemId);
            }).sorted((item1, item2) -> {
               return item1.getExtnDscLnItm().compareTo(item2.getExtnDscLnItm());
            }).limit(shippedQty).collect(Collectors.toList());
            orderPartialSplitLineItems.addAll(orderCancelGroupedLineItems);
         }

         List<OrderTranLineItem> serviceItemsList = (List)orderInitTempLineItems.stream().filter((item) -> {
            return item.getItmTy() != null && item.getItmTy().compareTo(new BigDecimal(2)) == 0;
         }).collect(Collectors.toList());
         orderPartialSplitLineItems.addAll(serviceItemsList);
         LOGGER.debug("Order Partial Split Line Items: \n\t" + orderPartialSplitLineItems);

         try {
            orderPartialGroupedLineItems = this.promoService.groupLineItems(orderPartialSplitLineItems);
         } catch (Exception var26) {
            LOGGER.error(var26.getMessage(), var26.getCause());
         }

         List<OrderTranLineItem> orderPartialGroupedLineItems = this.resetLineItemSequence((List)orderPartialGroupedLineItems);
         LOGGER.debug("Order Partial Grouped Line Items: \n\t" + orderPartialGroupedLineItems);
         orderPartial.setOrdTranLineItems(orderPartialGroupedLineItems);
         orderPartial = this.getUpdatedPartialHeader(orderPartial, employeeId);
         orderPartial = this.getCalculatedOrderTranSum(orderPartial);
         OrderTranHeader orderPartialClone = (OrderTranHeader)SerializationUtils.clone(orderPartial);
         EntityManager em = this.emf.createEntityManager();

         String orderCancel;
         try {
            em.getTransaction().begin();
            em.persist(orderPartialClone);
            LOGGER.info("trying to update the shippment table for the duplicated orders.... ");
            Date dt = new Date();
            SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss");
            orderCancel = format.format(dt);
            Query updateShipQtyTbl = em.createNamedQuery("UPD_ORDINV_SHPQTY").setParameter("rtlogbatch", orderCancel).setParameter("orderId", orderId);
            updateShipQtyTbl.executeUpdate();
            LOGGER.info("updated the shippment table for the duplicated orders.... ");
         } catch (Exception var25) {
            LOGGER.error(var25.getMessage(), var25.getCause());
         }

         List<OrderTranLineItem> orderCancelSplitLineItems = new ArrayList();
         List<OrderTranLineItem> orderCancelGroupedLineItems = new ArrayList();
         orderCancel = null;
         OrderTranHeader orderCancel = (OrderTranHeader)SerializationUtils.clone(orderInit);
         if (!orderPartialSplitLineItems.isEmpty()) {
            orderCancelSplitLineItems = new ArrayList(orderInitTempLineItems);
            orderCancelSplitLineItems.removeAll(orderPartialSplitLineItems);
            LOGGER.debug(orderCancelSplitLineItems);
         }

         try {
            orderCancelGroupedLineItems = this.promoService.groupLineItems(orderCancelSplitLineItems);
         } catch (Exception var24) {
            LOGGER.error(var24.getMessage(), var24.getCause());
         }

         orderCancelGroupedLineItems = this.resetLineItemSequence((List)orderCancelGroupedLineItems);
         orderCancel.setOrdTranLineItems(orderCancelGroupedLineItems);
         orderCancel = this.getUpdatedCancelHeader(orderCancel, employeeId);
         orderCancel = this.getCalculatedOrderTranSum(orderCancel);
         orderCancel.setTransComment(partialShippingReasonCode);
         orderCancel.setReturnReasonCode(partialShippingReasonCode);
         OrderTranHeader orderCancelClone = (OrderTranHeader)SerializationUtils.clone(orderCancel);

         try {
            if (orderCancelClone.getOrdTranLineItems() != null && orderCancelClone.getOrdTranLineItems().size() > 0) {
               em.persist(orderCancelClone);
            }

            em.getTransaction().commit();
            processedOrder.put("orderPartial", orderPartialClone);
            processedOrder.put("orderCancel", orderCancelClone);
            if (orderCancelClone.getOrdTranLineItems() != null && orderCancelClone.getOrdTranLineItems().size() > 0) {
               this.saveTenderLineForPartialOrderCancel(orderCancelClone);
            }
         } catch (Exception var23) {
            LOGGER.error(var23.getMessage(), var23.getCause());
         }
      }

      return processedOrder;
   }

   private void saveTenderLineForPartialOrderCancel(OrderTranHeader orderCancel) throws OrderTransactionException {
      TranLineItemTender tenderLineItem = new TranLineItemTender();
      TranLineItemTenderPK tenderLineItempk = new TranLineItemTenderPK();
      tenderLineItempk.setRtStrId(orderCancel.getId().getRtStrId());
      tenderLineItempk.setOrdWs(orderCancel.getId().getOrdWs());
      tenderLineItempk.setTrnSeq(orderCancel.getId().getTrnSeq());
      tenderLineItempk.setTrnLnItmSeq(1L);
      tenderLineItempk.setDcDyOrd(orderCancel.getId().getDcDyOrd());
      tenderLineItem.setId(tenderLineItempk);
      tenderLineItem.setMoItmLnTnd(orderCancel.getOrdTranSum().getDkartNetTot());
      tenderLineItem.setTyTnd("CARD");
      tenderLineItem.setIdOrd("HOUSE");
      tenderLineItem.setIdAcntNmb(orderCancel.getOrdTranSum().getOrdIdCt());
      tenderLineItem.setDkTsCrtRcrd(new Date());
      this.saveTenderLineItems(tenderLineItem);
   }

   private OrderTranHeader getUpdatedPartialHeader(OrderTranHeader orderPartial, String employeeId) {
      if (orderPartial != null) {
         orderPartial.setIdOpr(employeeId);
         long trnSeq = this.transactionService.getTranSeq(orderPartial.getId().getRtStrId());
         String businessDate = this.getDateForOrderHead();
         orderPartial.getId().setTrnSeq(trnSeq);
         orderPartial.getId().setDcDyOrd(businessDate);
         orderPartial.getOrdTranLineItems().forEach((lineItem) -> {
            lineItem.getId().setTrnSeq(trnSeq);
            lineItem.getId().setDcDyOrd(businessDate);
            if (lineItem.getOrdTranDscItms() != null) {
               lineItem.getOrdTranDscItms().forEach((discItem) -> {
                  discItem.getId().setTrnSeq(trnSeq);
                  discItem.getId().setDcDyOrd(businessDate);
                  discItem.setOrdTranLineItem(lineItem);
               });
            }

            lineItem.setOrdTranHeader(orderPartial);
         });
         orderPartial.getOrdTranSum().getId().setTrnSeq(trnSeq);
         orderPartial.getOrdTranSum().getId().setDcDyOrd(businessDate);
         orderPartial.getOrdTranSum().setOrdTranHeader(orderPartial);
         if (orderPartial.getOrdTranLpo() != null) {
            orderPartial.getOrdTranLpo().getId().setTrnSeq(trnSeq);
            orderPartial.getOrdTranLpo().getId().setDcDyOrd(businessDate);
            orderPartial.getOrdTranLpo().setOrdTranHeader(orderPartial);
         }

         orderPartial.setOrdTy("26");
         orderPartial.setScOrd(new BigDecimal(4));
         orderPartial.setTransactionStatus(new BigDecimal(2));
         orderPartial.setIdTlogBtch(new BigDecimal(-1));
         orderPartial.setIdTrlogBtch("-1");
         Date date = new Date();
         orderPartial.setTsCrtRcrd(date);
         orderPartial.setTsMdfRcrd(date);
         orderPartial.setTsOrdBgn(date);
         orderPartial.setTsOrdEnd(date);
      }

      return orderPartial;
   }

   private OrderTranHeader getUpdatedCancelHeader(OrderTranHeader orderCancel, String employeeId) {
      if (orderCancel != null) {
         orderCancel.setIdOpr(employeeId);
         long trnSeq = this.transactionService.getTranSeq(orderCancel.getId().getRtStrId());
         String businessDate = this.getDateForOrderHead();
         orderCancel.getId().setTrnSeq(trnSeq);
         orderCancel.getId().setDcDyOrd(businessDate);
         orderCancel.getOrdTranLineItems().forEach((lineItem) -> {
            lineItem.getId().setTrnSeq(trnSeq);
            lineItem.getId().setDcDyOrd(businessDate);
            if (lineItem.getOrdTranDscItms() != null) {
               lineItem.getOrdTranDscItms().forEach((discItem) -> {
                  discItem.getId().setTrnSeq(trnSeq);
                  discItem.getId().setDcDyOrd(businessDate);
                  discItem.setOrdTranLineItem(lineItem);
               });
            }

            lineItem.setOrdTranHeader(orderCancel);
         });
         orderCancel.getOrdTranSum().getId().setTrnSeq(trnSeq);
         orderCancel.getOrdTranSum().getId().setDcDyOrd(businessDate);
         orderCancel.getOrdTranSum().setOrdTranHeader(orderCancel);
         orderCancel.getOrdTranSum().setOrigOrderId(orderCancel.getOrdTranSum().getIdOrd());
         orderCancel.getOrdTranSum().setIdOrd(this.getOrderId(orderCancel));
         if (orderCancel.getOrdTranLpo() != null) {
            orderCancel.getOrdTranLpo().getId().setTrnSeq(trnSeq);
            orderCancel.getOrdTranLpo().getId().setDcDyOrd(businessDate);
            orderCancel.getOrdTranLpo().setOrdTranHeader(orderCancel);
         }

         orderCancel.setOrdTy("25");
         orderCancel.setScOrd(new BigDecimal(8));
         orderCancel.setTransactionStatus(new BigDecimal(2));
         orderCancel.setIdTlogBtch(new BigDecimal(-1));
         orderCancel.setIdTrlogBtch("-1");
         Date date = new Date();
         orderCancel.setTsCrtRcrd(date);
         orderCancel.setTsMdfRcrd(date);
         orderCancel.setTsOrdBgn(date);
         orderCancel.setTsOrdEnd(date);
      }

      return orderCancel;
   }

   private OrderTranHeader getCalculatedOrderTranSum(OrderTranHeader orderTranHeader) {
      if (orderTranHeader == null) {
         return null;
      } else {
         List<OrderTranLineItem> ordLineList = orderTranHeader.getOrdTranLineItems();
         BigDecimal subTotal = BigDecimal.ZERO;
         BigDecimal discountedTotal = BigDecimal.ZERO;
         BigDecimal expenses = BigDecimal.ZERO;
         if (ordLineList != null) {
            Iterator var7 = ordLineList.iterator();

            label39:
            while(true) {
               while(true) {
                  if (!var7.hasNext()) {
                     break label39;
                  }

                  OrderTranLineItem orderTranLineItem = (OrderTranLineItem)var7.next();
                  if (orderTranLineItem.getItmTy() != null && orderTranLineItem.getItmTy().intValue() == 2) {
                     expenses = expenses.add(orderTranLineItem.getExtnLnItmRtn());
                  } else {
                     subTotal = subTotal.add(orderTranLineItem.getExtnLnItmRtn());
                  }
               }
            }
         }

         OrderTranSum orderTranSum = orderTranHeader.getOrdTranSum();
         orderTranSum.setDkartSlsTot(subTotal);
         BigDecimal serviceTotal = BigDecimal.ZERO;
         if (ordLineList != null) {
            Iterator var9 = ordLineList.iterator();

            while(var9.hasNext()) {
               OrderTranLineItem orderTranLineItem = (OrderTranLineItem)var9.next();
               discountedTotal = discountedTotal.add(orderTranLineItem.getExtnDscLnItm());
               if (orderTranLineItem.getItmTy() != null && orderTranLineItem.getItmTy().equals(new BigDecimal(2))) {
                  serviceTotal = serviceTotal.add(orderTranLineItem.getExtnLnItmRtn());
               }
            }
         }

         BigDecimal totalDisc = subTotal.subtract(discountedTotal);
         BigDecimal total = discountedTotal.add(new BigDecimal(0));
         orderTranSum.setDkartDscTot(totalDisc);
         orderTranSum.setDkartNetTot(total);
         orderTranSum.setDkartTaxTot(new BigDecimal(0));
         orderTranSum.setDkartExpenses(expenses);
         BigDecimal totalExcludingServicePrice = total.subtract(serviceTotal);
         orderTranSum.setTotalExcludingServicePrice(totalExcludingServicePrice);
         orderTranHeader.setOrdTranSum(orderTranSum);
         return orderTranHeader;
      }
   }

   private List<OrderTranLineItem> resetLineItemSequence(List<OrderTranLineItem> orderTranLineItemsList) {
      if (orderTranLineItemsList == null) {
         return null;
      } else {
         int i = 1;
         ListIterator listIter = orderTranLineItemsList.listIterator();

         while(listIter.hasNext()) {
            ((OrderTranLineItem)listIter.next()).getId().setOrdLnItmSeq((long)(i++));
         }

         return orderTranLineItemsList;
      }
   }
}